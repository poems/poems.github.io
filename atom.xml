<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[POEMS]]></title>
  <link href="http://poems.github.io/atom.xml" rel="self"/>
  <link href="http://poems.github.io/"/>
  <updated>2013-12-13T03:13:24+00:00</updated>
  <id>http://poems.github.io/</id>
  <author>
    <name><![CDATA[Pieux Xi]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Things about Tomcat SSL Certification and CAS(SAML)]]></title>
    <link href="http://poems.github.io/blog/2013/12/12/things-about-tomcat-ssl-certification-and-cas-saml/"/>
    <updated>2013-12-12T03:07:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/12/12/things-about-tomcat-ssl-certification-and-cas-saml</id>
    <content type="html"><![CDATA[<p>这里是对Tomcat配置证书（生成/导出/导入）的 spike 总结。也不一定是总结
啦。</p>

<p>会总结哪些方面呢？</p>

<ol>
<li>keytool 相关的命令和作用；</li>
<li>Tomcat 的 SSL 配置；</li>
<li>什么是证书？</li>
<li>服务端和客户端都在本地的配置（开发配置）；</li>
<li>服务端部署在其他域名上；</li>
<li>etc.</li>
</ol>


<p>目前想到的几个问题：
&ndash; <code>~/.keystore</code>，为什么 client 会找这个文件？</p>

<ul>
<li><code>self-signed certificate</code></li>
</ul>


<h2>CAS Java Client 配置 SAML 1.1</h2>

<p>在 client 需要添加这些依赖：</p>

<ul>
<li>cas-client-core-3.1.3.jar</li>
<li>commons-codec-1.4.jar</li>
<li>commons-logging-1.1.jar</li>
<li>opensaml-1.1.jar</li>
<li>xmlsec-1.4.0.jar</li>
<li>log4j-1.2.15.jar</li>
</ul>


<p>关于版本，core的话，目前最新的是 3.2。opensaml肯定使用 1.1，因为是
SAML1.1 协议。</p>

<p>其他几个包是什么呢？不需要深入了解，从名称猜测，commons-codec 提供了一
些 encode，decode 方法。xmlsec 应该是安全的XML。</p>

<p>cas-client-core
<a href="http://mvnrepository.com/artifact/org.jasig.cas">http://mvnrepository.com/artifact/org.jasig.cas</a></p>

<p>commons-codec
<a href="http://mvnrepository.com/artifact/commons-codec/commons-codec">http://mvnrepository.com/artifact/commons-codec/commons-codec</a></p>

<p>opensaml
<a href="http://mvnrepository.com/artifact/org.opensaml/opensaml/1.1">http://mvnrepository.com/artifact/org.opensaml/opensaml/1.1</a></p>

<p>xmlsec
<a href="http://mvnrepository.com/artifact/org.apache.santuario/xmlsec">http://mvnrepository.com/artifact/org.apache.santuario/xmlsec</a></p>

<h2>Tomcat 配置 SSL</h2>

<p>关于 Tomcat 配置 SSL</p>

<h3>什么是 SSL?</h3>

<blockquote><p>主要参考文章 <a href="http://www.sunchis.com/html/java/javaweb/2010/0313/68.html">SSL简介</a></p></blockquote>

<p>SSL(Server Socket Layer)</p>

<blockquote><p>SSL（Server Socket Layer）是一种保证网络上的两个节点进行安全通信的协议。IETF（Internet Engineering Task Force）组织对SSL作了标准化，制订了RFC2246规范，并将其称为TLS（Transport Layer Security）。从技术上讲，目前TLS 1.0与TLS 3.0的差别非常微小。</p></blockquote>

<p>从引用看出一个经常看到的术语：TLS，就是标准化的 SSL 通信协议。换句话说，
TLS 是基于 SSL 开发的。准确地说，TLS 1.0 替代了 SSL 2.0，并且 TLS 1.0
和 SSL 3.0 的差别不大，但不能忽操作。</p>

<p>这方面的参考链接：</p>

<ol>
<li><p><a href="http://luxsci.com/blog/ssl-versus-tls-whats-the-difference.html">SSL versus TLS – What’s the difference?</a></p></li>
<li><p><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa380515(v=vs.85).aspx">TLS vs. SSL</a></p></li>
<li><p><a href="http://www.cnblogs.com/adforce/archive/2012/11/27/2790937.html">SSL/TLS 协议详解</a></p></li>
</ol>


<p>SSL和TLS建立在TCP/IP协议的基础上，一些应用层协议，如HTTP和IMAP协议都可
以采用SSL来保证通信的安全。建立在SSL协议上的HTTP被称为HTTPS协议。HTTP
使用的默认端口为80，而HTTPS使用的默认端口为443。</p>

<table>
<thead>
<tr>
<th align="center">协议层</th>
<th align="center">协议</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">应用层</td>
<td align="center">HTTP、IMAP、NNTP、Telnet、FTP等</td>
</tr>
<tr>
<td align="center">安全套接字层</td>
<td align="center">SSL、TLS</td>
</tr>
<tr>
<td align="center">传输层</td>
<td align="center">TCP</td>
</tr>
<tr>
<td align="center">网络层</td>
<td align="center">IP</td>
</tr>
</tbody>
</table>


<p>SSL采用加密技术来实现安全通信，保证通信数据的保密性和完整性，并且保证
通信双方可以验证对方的身份。</p>

<h3>SSL 中的证书</h3>

<p>除了对数据通信进行加密外，SSL还采用了身份认证机制，确保通信双方都可以
验证对方的真实身份。</p>

<p>SSL通过安全证书来证明客户或服务器的身份。当客户通过安全的连接和服务器
通信时，服务器会先向客户出示它的安全证书，这个证书声明该服务器是安全的，
而且的确是这个服务器。每一个证书在全球范围内都是唯一的，其他非法服务器
无法假冒原始服务器的身份。可以把安全证书比做电子身份证。</p>

<p>获取安全证书是一件麻烦的事情。一些服务器会向客户出示自己的安全证书，但
另一方面，为了扩大客户群并且便于客户访问，许多服务器不要求客户出示安全
证书。在某些情况下，服务器也会要求客户出示安全证书，以便核实客户的身份，
这主要用于B2B（Business to Business）事务中。</p>

<p>获取安全证书有两种方式，一种方式是从权威机构购买证书，还有一种方式是创建自我签名的证书。</p>

<p><strong>1 从权威机构获得证书</strong></p>

<p>安全证书可以有效地保证通信双方身份的可信性。安全证书采用加密技术制作而
成，他人几乎无法伪造。安全证书由国际权威的证书机构（Certificate
Authority，CA）如VeriSign（www.verisign.com）和Thawte（www.thawte.com）
颁发，它们保证了证书的可信性。申请安全证书时，必须支付一定的费用。一个
安全证书只对一个IP地址有效，如果用户的系统环境中有多个IP，那么必须为每
个IP地址购买安全证书。</p>

<p><strong>2 创建自我签名证书</strong></p>

<p>在某些场合，通信双方只关心数据在网络上可以安全传输，并不需要对对方进行
身份验证，在这种情况下，可以创建自我签名（self-assign）的证书，比如通
过SUN公司提供的keytool工具就可以创建这样的证书。</p>

<p>即，只需要数据加密传输，而不需要额外的一层身份校验。</p>

<h2>使用 keytool 工具</h2>

<p>这方面的参考文章很多。</p>

<p>对于 .Net，请参考：
<a href="http://www.cnblogs.com/zhenyulu/archive/2013/01/22/2870838.html">Yale CAS + .net Client 实现 SSO（1）</a></p>

<p>对于 Java，请参考：
<a href="http://blog.csdn.net/small_love/article/details/6664831">CAS实现单点登录（SSO）经典完整教程</a>
。</p>

<p>这里唯一需要注意的一点是：生成证书时，要求输入名称和姓氏(First Name
and Last Name)时，需要输入部署 cas server 的计算机名，比如：
pieux-macbook-pro.local 或者 tech-w-xishanshan。在后面的配置 cas
client 的 Authentication Filter 和 Validation Filter 时，配置的服务器
地址应该也是以计算机名开头，不要使用 localhost 或者 ip：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;init-param&gt;
</span><span class='line'>    &lt;param-name&gt;casServerLoginUrl&lt;/param-name&gt;
</span><span class='line'>    &lt;param-value&gt;https://pieux-macbook-pro.local:8443/cas/login&lt;/param-value&gt;
</span><span class='line'>&lt;/init-param&gt;
</span><span class='line'>...
</span><span class='line'>&lt;filter-name&gt;CAS Validation Filter&lt;/filter-name&gt;
</span><span class='line'>&lt;filter-class&gt;org.jasig.cas.client.validation.Saml11TicketValidationFilter&lt;/filter-class&gt;
</span><span class='line'>&lt;init-param&gt;
</span><span class='line'>    &lt;param-name&gt;casServerUrlPrefix&lt;/param-name&gt;
</span><span class='line'>    &lt;param-value&gt;https://pieux-macbook-pro.local:8443/cas&lt;/param-value&gt;
</span><span class='line'>&lt;/init-param&gt;</span></code></pre></td></tr></table></div></figure>


<h2>自我签名证书在开发中的注意事项</h2>

<p>如果 cas server 和 cas client 都部署在相同的机器上（一般是开发过程中），
那如果你按照上面和上面提到的参考文章的步骤，就应该不会有错误了。</p>

<p>但是，有一个大坑。如果 cas server 和 cas client 不是部署在一台机器上，
你很有可能会遇到一个<strong>异常</strong>是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sun.security.validator.ValidatorException: PKIX path building failed:</span></code></pre></td></tr></table></div></figure>


<p> The problem here is that the CAS client does not trust the
 certificate presented by the CAS server; most often this occurs
 because of using a self-signed certificate on the CAS server.</p>

<p>该问题一般是 cas client 不信任 cas server 展示的证书，而且绝大多数情况
下（按我目前遇到的，就是所有情况下），是 cas server 向 client 展示的是
self-signed certificate。</p>

<p>而且，使用SAML11的时候会报错（难道是SAML11也需要检验证书的真实性？），
使用CAS20就不会报错。因为按理说，SSL可以不需要证书，只利用加密通信的特
性。这块持续挖掘下。</p>

<p>那怎么解决这个问题呢？很简单，让 client 信任 server 的证书就行了。把
server 端生成的证书拷贝到 client 端部署的机器上，然后用 keytool 工具导
入到 client 机器 JDK 的 cacerts 里。</p>

<h2>SSL握手通信过程</h2>

<blockquote><p>主要参考文章 <a href="http://www.sunchis.com/html/java/javaweb/2010/0313/68.html">SSL握手通信过程</a></p></blockquote>

<p>暂时先不了解。</p>

<h2>什么是 <code>.keystore</code> 文件？</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Touch of Travis CI]]></title>
    <link href="http://poems.github.io/blog/2013/12/11/first-touch-of-travis-ci/"/>
    <updated>2013-12-11T02:37:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/12/11/first-touch-of-travis-ci</id>
    <content type="html"><![CDATA[<p>目前 Travis CI 给我的感觉和 Jekins 类似，每次 push 到 github 上，
Travis 会自动跑一遍，比如按官方文档所说，对于 Java 项目，如果发现
pom.xml 文件，会使用 Maven 3 的一些 lifecycle。</p>

<p>对于一个 Java 项目，需要在 .git/ 目录下，新建文件 <code>.travis.yml</code>，最简
单的内容是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: java</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NOTE: Everything about CAS]]></title>
    <link href="http://poems.github.io/blog/2013/12/08/note-everything-about-cas/"/>
    <updated>2013-12-08T02:12:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/12/08/note-everything-about-cas</id>
    <content type="html"><![CDATA[<p>假设 CAS Server 的域名是 cas.server.com</p>

<p>CAS Server 的 webapp 是 spring web flow，登陆地址为：<a href="https://cas.server.com/cas/login">https://cas.server.com/cas/login</a></p>

<p>登出地址为：<a href="https://cas.server.com/cas/logout">https://cas.server.com/cas/logout</a></p>

<p>语言参数为：locale=zh_CN，locale=en</p>

<p>除了配置 CAS Server 和 Client 外，需要配置环境，包括生成和导出导入证书，Tomcat配置SSL等。</p>

<h2>CAS Server</h2>

<h3>原理（认证流程）</h3>

<p><img src="http://i.imgur.com/MDSRTIc.jpg" alt="CAS 基本模式" /></p>

<p><strong>原理</strong>：按照此图来说</p>

<ol>
<li><p>用户访问CAS Client</p></li>
<li><p>其配置的 AuthenticationFilter 会拦截此请求，生成 service 参数，并重定向到 CAS Server 的登陆接口，url为 <a href="https://cas.server.com/login?service=redirect_url">https://cas.server.com/login?service=redirect_url</a></p></li>
<li><p>用户在 CAS Server 输入 Credentials(一般就是用户名和密码)进行身份验证，成功后，CAS Server 会生成认证 cookie，即TGC。（另：TGC作为 cookie之外，也会换存在服务器本地，我猜测是不是服务器运行实例的内存中。）</p></li>
<li><p>CAS Server还会根据 service 参数，生成 Ticket，即ST。ST会保存在服务器，也会加在 url 后面，重定向回 client。url为 <a href="http://client_server_url:port/app_name?ticket=ST-*-*">http://client_server_url:port/app_name?ticket=ST-*-*</a></p></li>
<li><p>Client 的 AuthenticationFilter 看到 ticket 参数后，会跳过，交由后面的 TicketValidationFilter 来处理。TicketValidationFilter 会利用 httpclient 工具访问 cas server 的 /serviceValidate 接口，将 ticket, service 传入该接口，验证 ticket 的有效性。</p></li>
<li><p>如果返回验证成功，就会把用户信息写入 client 的 session 里。</p></li>
</ol>


<p>至此，SSO 会话就建立起来了。</p>

<p>结果就是：</p>

<ol>
<li><p>用户在同一浏览器访问同一 client，不会去 CAS Server 认证，因为 AuthenticationFilter 会在 session 读取到用户信息。</p></li>
<li><p>用户在同一浏览器访问其他 client，AuthenticationFilter 在 session 里读不到用户信息，会去 cas login 接口认证，但是此时 cas login 接口会读取到存储在cas server域名下的 TGC，所以，CAS Server不会跳到登录页，只会根据 service 参数生成一个 ticket，传给 client。然后由TicketValidationFilter做一次交互验证。</p></li>
</ol>


<h3>CAS Server 提供的接口</h3>

<p>cas server 一共定义了9个接口。client 会通过 url redirect 和 httpclient 的方式和 server 交互。</p>

<table>
<thead>
<tr>
<th align="center">接口 </th>
<th align="left"> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">/login        </td>
<td align="left"> 认证接口</td>
</tr>
<tr>
<td align="center">/logout       </td>
<td align="left"> 退出接口，销毁 TGC</td>
</tr>
<tr>
<td align="center">/validate     </td>
<td align="left"> 验证 ticket 接口，CAS1.0</td>
</tr>
<tr>
<td align="center">/serviceValidate </td>
<td align="left"> 同上，CAS2.0</td>
</tr>
<tr>
<td align="center">/proxy        </td>
<td align="left"> 支持代理功能的接口</td>
</tr>
<tr>
<td align="center">/proxyValidate </td>
<td align="left"> 同上</td>
</tr>
<tr>
<td align="center">/CentralAuthenticationService </td>
<td align="left"> 用于和远程的 web services 交互</td>
</tr>
<tr>
<td align="center">/remoteLogin  </td>
<td align="left"> 认证接口（新增）</td>
</tr>
<tr>
<td align="center">/directLogin  </td>
<td align="left"> 认证接口（新增）</td>
</tr>
</tbody>
</table>


<h2>认证相关的术语</h2>

<ul>
<li><p><strong>Credentials</strong> 用户提供的凭证，比如 用户名/密码，证书，IP地址，Cookie值等。</p></li>
<li><p><strong>AuthenticationHandler</strong> 认证Handler，比如：AbstractUsernamePasswordAuthenticationHandler 负责处理 UsernamePasswordCredentials.</p></li>
<li><p><strong>CredentialsToPrincipalResolvers</strong> 负责由 Credentials 生成 Principal 对象，每种 CredentialsToPrincipalResolvers 只处理 一种Credentials ，比如 UsernamePasswordCredentialsToPrincipalResolver 负责从 UsernamePasswordCredentials 中取出用户名，然后将其赋给生成的 SimplePrincipal 的 ID 属性。</p></li>
<li><p><strong>AuthenticationMetaDataPopulators</strong> 负责将 Credentials 的一些属性赋值给 Authentication 的 attributes 属性。</p></li>
<li><p><strong>Authentication</strong>  Authentication是认证管理器的最终处理结果， Authentication 封装了 Principal ，认证时间，及其他一些属性（可能来自 Credentials）。</p></li>
<li><p><strong>AuthenticationManager</strong> 认证管理器得到 Credentials 对象后，负责调度AuthenticationHandler 去完成认证工作，最后返回的结果是 Authentication 对象。</p></li>
<li><p><strong>CentralAuthenticationService</strong> CAS 的服务类，对 Web 层提供了一些方法。该类还负责调用 AuthenticationManager 完成认证逻辑。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Archetype Plugin]]></title>
    <link href="http://poems.github.io/blog/2013/12/08/maven-archetype-plugin/"/>
    <updated>2013-12-08T01:31:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/12/08/maven-archetype-plugin</id>
    <content type="html"><![CDATA[<h2>Struts 2 Maven Archetype</h2>

<h3>The Blank Archetype (struts2-archetype-blank)</h3>

<h3>The Starter Archetype (struts2-archetype-starter)</h3>

<p>Compared to the former, it adds more features like &ldquo;Spring Integration&rdquo;.</p>

<h3>The Blank Convention Archetype (struts2-archetype-convention)</h3>

<p>Features like &ldquo;Convention-based validation&rdquo;, &ldquo;GAE aware&rdquo;.</p>

<h2>Creating an Application Using a Maven Archetyp</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate -B \
</span><span class='line'>                       -DgroupId=tutorial \
</span><span class='line'>                       -DartifactId=tutorial \
</span><span class='line'>                       -DarchetypeGroupId=org.apache.struts \
</span><span class='line'>                       -DarchetypeArtifactId=struts2-archetype-blank \
</span><span class='line'>                       -DarchetypeVersion=&lt;version&gt;</span></code></pre></td></tr></table></div></figure>


<p>If the above command will fail because of missing archetypes in central repository, you can try to use staging repository like below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate -DarchetypeCatalog=http://people.apache.org/builds/struts/&lt;version&gt;/m2-staging-repository/</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NOTE: CAS Java Client]]></title>
    <link href="http://poems.github.io/blog/2013/12/05/note-cas-java-client/"/>
    <updated>2013-12-05T08:43:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/12/05/note-cas-java-client</id>
    <content type="html"><![CDATA[<h1>CAS Client for Java 3.1</h1>

<h2>通过 web.xml 配置 Jasig CAS Client for Java</h2>

<p>CAS Client for Java 3.1/3.2 可以通过配置 web.xml 里的 context-params 和 filter init-params。每个 filter 都需要配置一系列的属性（properties）。filters 会查找这些属性：</p>

<ol>
<li>首先检查 filter 的本地 init-params（local init-params），看是否有相符合的属性名；</li>
<li>其次检查 context 的参数 ，看是否有相符合的属性名；</li>
</ol>


<p>如果在 filter 的 init-params 和 context 的参数中找到相同的值，则选用 init-params。</p>

<p>同样，filter 的顺序为：</p>

<ol>
<li>SingleLogOutFilter (if you&rsquo;re using it)</li>
<li>AuthenticationFilter</li>
<li>TicketValidationFilter (whichever one is chosen)</li>
<li>HttpServletRequestWrapperFilter</li>
<li>AssertionThreadLocalFilter</li>
</ol>


<blockquote><p>! 如果使用 serverName 属性，请注意 fragment-URL(#后的 URL)不会发送给服务器。</p></blockquote>

<p>一一介绍可用的 filters:</p>

<h3>org.jasig.cas.client.authentication.AuthenticationFilter</h3>

<p>AuthenticationFilter 判断一个用户是否需要验证。如果需要，则重定向到 CAS server。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;filter&gt;
</span><span class='line'>  &lt;filter-name&gt;CAS Authentication Filter&lt;/filter-name&gt;
</span><span class='line'>  &lt;filter-class&gt;org.jasig.cas.client.authentication.AuthenticationFilter&lt;/filter-class&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>    &lt;!--cas server login url--&gt;
</span><span class='line'>    &lt;param-name&gt;casServerLoginUrl&lt;/param-name&gt;
</span><span class='line'>    &lt;param-value&gt;https://battags.ad.ess.rutgers.edu:8443/cas/login&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>    &lt;!--cas server name--&gt;
</span><span class='line'>    &lt;param-name&gt;serverName&lt;/param-name&gt;
</span><span class='line'>    &lt;param-value&gt;http://www.acme-client.com&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'>&lt;/filter&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>Required Properties</strong></p>

<ul>
<li>casServerLoginUrl: CAS server 的登录页地址，i.e. <a href="https://localhost:8443/cas/login">https://localhost:8443/cas/login</a></li>
<li>service or serverName

<ul>
<li>service: 发送给 CAS server 的服务的 URL，e.g. <a href="https://localhost:8443/yourwebapp/index.html">https://localhost:8443/yourwebapp/index.html</a></li>
<li>serverName: 应用部署的服务器名。service URL 会据此动态生成。i.e. <a href="https://localhost:8443">https://localhost:8443</a> (需要指定协议，如果是标准端口，则端口可隐式)。</li>
</ul>
</li>
</ul>


<p><strong>Optional Properties</strong>:</p>

<p>有 <em>renew</em>, <em>gateway</em>, <em>artifactParameterName</em>, <em>serviceParameterName</em>。</p>

<h3>org.jasig.cas.client.authentication.Saml11AuthenticationFilter</h3>

<p>猜测是支持 SAML 1.1 的 authentication filter。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;filter&gt;
</span><span class='line'>  &lt;filter-name&gt;CAS Authentication Filter&lt;/filter-name&gt;
</span><span class='line'>  &lt;filter-class&gt;org.jasig.cas.client.authentication.AuthenticationFilter&lt;/filter-class&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>    &lt;param-name&gt;casServerLoginUrl&lt;/param-name&gt;
</span><span class='line'>    &lt;param-value&gt;https://battags.ad.ess.rutgers.edu:8443/cas/login&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>    &lt;param-name&gt;serverName&lt;/param-name&gt;
</span><span class='line'>    &lt;param-value&gt;http://www.acme-client.com&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'>&lt;/filter&gt;</span></code></pre></td></tr></table></div></figure>


<h3>org.jasig.cas.client.validation.Saml11TicketValidationFilter</h3>

<p>使用 SAML 1.1 协议验证 tickets。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;filter&gt;
</span><span class='line'>  &lt;filter-name&gt;CAS Validation Filter&lt;/filter-name&gt;
</span><span class='line'>  &lt;filter-class&gt;org.jasig.cas.client.validation.Saml11TicketValidationFilter&lt;/filter-class&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>    &lt;param-name&gt;casServerUrlPrefix&lt;/param-name&gt;
</span><span class='line'>    &lt;param-value&gt;https://battags.ad.ess.rutgers.edu:8443/cas&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>    &lt;param-name&gt;serverName&lt;/param-name&gt;
</span><span class='line'>    &lt;param-value&gt;http://www.acme-client.com&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'> &lt;/filter&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>Required Properties</strong></p>

<ul>
<li>casServerUrlPrefix: CAS 服务器的URL起始页，i.e. <a href="https://localhost:8443/cas">https://localhost:8443/cas</a></li>
<li>serverName or service: 同上</li>
</ul>


<p><strong>Optional Properties</strong></p>

<ul>
<li>redirectAfterValidation (default: true)</li>
<li>useSession (default: true)</li>
<li>exceptionOnValidationFailure (default: true)</li>
<li>tolerance (default: 1000 mSec)</li>
<li>renew (default: false)</li>
</ul>


<h3>org.jasig.cas.client.util.HttpServletRequestWrapperFilter</h3>

<p>Wraps an HttpServletRequest so that the getRemoteUser and getPrincipal return the CAS related entries.</p>

<p>包裹 HttpServletRequest，使 getRemoteUser 和 getPrincipal 返回 CAS 相关的入口。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;filter&gt;
</span><span class='line'>  &lt;filter-name&gt;CAS HttpServletRequest Wrapper Filter&lt;/filter-name&gt;
</span><span class='line'>  &lt;filter-class&gt;org.jasig.cas.client.util.HttpServletRequestWrapperFilter&lt;/filter-class&gt;
</span><span class='line'>&lt;/filter&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>Required Properties</strong></p>

<p>None</p>

<p><strong>Optional Properties</strong></p>

<p>None</p>

<h3>org.jasig.cas.client.util.AssertionThreadLocalFilter</h3>

<p>Places the Assertion in a ThreadLocal for portions of the application that need access to it. This is useful when the Web application that this filter &ldquo;fronts&rdquo; needs to get the Principal name, but it has no access to the HttpServletRequest, hence making getRemoteUser() call impossible.</p>

<p>把这个 Assertion 放进 ThreadLocal 中，因为有些应用可能需要。比如：当 Web 应用需要拿到 Principal 的名字，但是它无法访问 HttpServletRequest，因此 getRemoteUser() 没有用。</p>

<blockquote><p>! 没搞懂什么意思，猜测是 CAS Client 应用想要拿到登陆的用户名，但是用户名存储在 CAS Server 上。这个 filter 的作用就是把 Principal 放到 ThreadLocal 变量中。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;filter&gt;
</span><span class='line'>  &lt;filter-name&gt;CAS Assertion Thread Local Filter&lt;/filter-name&gt;
</span><span class='line'>  &lt;filter-class&gt;org.jasig.cas.client.util.AssertionThreadLocalFilter&lt;/filter-class&gt;
</span><span class='line'>&lt;/filter&gt;</span></code></pre></td></tr></table></div></figure>


<p>e.g. 一份稍完整的 CAS Client for Java 的 web.xml（未使用 SAML 1.1，为 CAS 协议）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
</span><span class='line'>&lt;web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
</span><span class='line'>    version="2.4"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;display-name&gt;CAS client demo : application&lt;/display-name&gt;
</span><span class='line'>
</span><span class='line'>    &lt;filter&gt;
</span><span class='line'>        &lt;!--配置 AuthenticationFilter--&gt;
</span><span class='line'>        &lt;filter-name&gt;CAS Authentication Filter&lt;/filter-name&gt;
</span><span class='line'>        &lt;filter-class&gt;org.jasig.cas.client.authentication.AuthenticationFilter&lt;/filter-class&gt;
</span><span class='line'>        &lt;init-param&gt;
</span><span class='line'>            &lt;!--property: 登陆页配置--&gt;
</span><span class='line'>            &lt;param-name&gt;casServerLoginUrl&lt;/param-name&gt;
</span><span class='line'>            &lt;param-value&gt;http://localhost:8080/cas/login&lt;/param-value&gt;
</span><span class='line'>        &lt;/init-param&gt;
</span><span class='line'>        &lt;init-param&gt;
</span><span class='line'>            &lt;!--property: 部署服务器地址--&gt;
</span><span class='line'>            &lt;param-name&gt;serverName&lt;/param-name&gt;
</span><span class='line'>            &lt;param-value&gt;http://localhost:8080&lt;/param-value&gt;
</span><span class='line'>        &lt;/init-param&gt;
</span><span class='line'>        &lt;!-- init-param&gt;
</span><span class='line'>            &lt;param-name&gt;service&lt;/param-name&gt;
</span><span class='line'>            &lt;param-value&gt;http://localhost:8080/default.jsp&lt;/param-value&gt;
</span><span class='line'>        &lt;/init-param--&gt;
</span><span class='line'>    &lt;/filter&gt;
</span><span class='line'>
</span><span class='line'>    &lt;filter&gt;
</span><span class='line'>        &lt;filter-name&gt;CAS Validation Filter&lt;/filter-name&gt;
</span><span class='line'>        &lt;filter-class&gt;org.jasig.cas.client.validation.Cas10TicketValidationFilter&lt;/filter-class&gt;
</span><span class='line'>        &lt;init-param&gt;
</span><span class='line'>            &lt;param-name&gt;casServerUrlPrefix&lt;/param-name&gt;
</span><span class='line'>            &lt;param-value&gt;http://localhost:8080/cas&lt;/param-value&gt;
</span><span class='line'>        &lt;/init-param&gt;
</span><span class='line'>        &lt;init-param&gt;
</span><span class='line'>            &lt;param-name&gt;serverName&lt;/param-name&gt;
</span><span class='line'>            &lt;param-value&gt;http://localhost:8080&lt;/param-value&gt;
</span><span class='line'>        &lt;/init-param&gt;
</span><span class='line'>    &lt;/filter&gt;
</span><span class='line'>
</span><span class='line'>    &lt;filter-mapping&gt;
</span><span class='line'>        &lt;filter-name&gt;CAS Authentication Filter&lt;/filter-name&gt;
</span><span class='line'>        &lt;url-pattern&gt;/protected/*&lt;/url-pattern&gt;
</span><span class='line'>    &lt;/filter-mapping&gt;
</span><span class='line'>
</span><span class='line'>    &lt;filter-mapping&gt;
</span><span class='line'>        &lt;filter-name&gt;CAS Validation Filter&lt;/filter-name&gt;
</span><span class='line'>        &lt;url-pattern&gt;*&lt;/url-pattern&gt;
</span><span class='line'>    &lt;/filter-mapping&gt;
</span><span class='line'>
</span><span class='line'>&lt;/web-app&gt;</span></code></pre></td></tr></table></div></figure>


<p>e.g. 使用 SAML 1.1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
</span><span class='line'>&lt;web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
</span><span class='line'>  version="2.4"&gt;
</span><span class='line'>
</span><span class='line'>  &lt;display-name&gt;CAS client demo : application&lt;/display-name&gt;
</span><span class='line'>
</span><span class='line'>  &lt;filter&gt;
</span><span class='line'>      &lt;filter-name&gt;CAS Authentication Filter&lt;/filter-name&gt;
</span><span class='line'>      &lt;filter-class&gt;org.jasig.cas.client.authentication.Saml11AuthenticationFilter&lt;/filter-class&gt;
</span><span class='line'>      &lt;init-param&gt;
</span><span class='line'>          &lt;param-name&gt;casServerLoginUrl&lt;/param-name&gt;
</span><span class='line'>          &lt;param-value&gt;http://localhost:8080/cas/login&lt;/param-value&gt;
</span><span class='line'>      &lt;/init-param&gt;
</span><span class='line'>      &lt;init-param&gt;
</span><span class='line'>          &lt;param-name&gt;serverName&lt;/param-name&gt;
</span><span class='line'>          &lt;param-value&gt;http://localhost:8080&lt;/param-value&gt;
</span><span class='line'>      &lt;/init-param&gt;
</span><span class='line'>      &lt;init-param&gt;
</span><span class='line'>          &lt;param-name&gt;onlyFullyAuthenticated&lt;/param-name&gt;
</span><span class='line'>            &lt;param-value&gt;true&lt;/param-value&gt;
</span><span class='line'>        &lt;/init-param&gt;
</span><span class='line'>  &lt;/filter&gt;
</span><span class='line'>
</span><span class='line'>  &lt;filter&gt;
</span><span class='line'>      &lt;filter-name&gt;CAS Validation Filter&lt;/filter-name&gt;
</span><span class='line'>      &lt;filter-class&gt;org.jasig.cas.client.validation.Saml11TicketValidationFilter&lt;/filter-class&gt;
</span><span class='line'>      &lt;init-param&gt;
</span><span class='line'>          &lt;param-name&gt;casServerUrlPrefix&lt;/param-name&gt;
</span><span class='line'>          &lt;param-value&gt;http://localhost:8080/cas&lt;/param-value&gt;
</span><span class='line'>      &lt;/init-param&gt;
</span><span class='line'>      &lt;init-param&gt;
</span><span class='line'>          &lt;param-name&gt;serverName&lt;/param-name&gt;
</span><span class='line'>          &lt;param-value&gt;http://localhost:8080&lt;/param-value&gt;
</span><span class='line'>      &lt;/init-param&gt;
</span><span class='line'>  &lt;/filter&gt;
</span><span class='line'>
</span><span class='line'>  &lt;filter-mapping&gt;
</span><span class='line'>      &lt;filter-name&gt;CAS Authentication Filter&lt;/filter-name&gt;
</span><span class='line'>      &lt;url-pattern&gt;/protected/*&lt;/url-pattern&gt;
</span><span class='line'>  &lt;/filter-mapping&gt;
</span><span class='line'>
</span><span class='line'>  &lt;filter-mapping&gt;
</span><span class='line'>      &lt;filter-name&gt;CAS Validation Filter&lt;/filter-name&gt;
</span><span class='line'>      &lt;url-pattern&gt;*&lt;/url-pattern&gt;
</span><span class='line'>  &lt;/filter-mapping&gt;
</span><span class='line'>
</span><span class='line'>&lt;/web-app&gt;</span></code></pre></td></tr></table></div></figure>


<h2>配置单点登出 Single Sign Out</h2>

<blockquote><p>! <em>SingleSignOutFilter</em> 会影响到 character encoding。建议显式地配置下 <a href="http://code.google.com/p/vt-middleware/wiki/vtservletfilters#CharacterEncodingFilter">VT Character Encoding Filter</a> 或 <a href="http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/web/filter/CharacterEncodingFilter.html">Spring Character Encoding Filter</a>。</p></blockquote>

<p>CAS 对 Single Sign Out support 的支持，涉及到对一个 filter 和一个 ContextListener 的配置。需要注意的一点是，如果以 Web filters 的形式为 Java 配置 CAS Client，登出的 filter 需要在其他 filters 前面。</p>

<p><strong>PS</strong>: Order of Required Filters <a href="https://wiki.jasig.org/display/CASC/CAS+Client+for+Java+3.1">全文链接</a>
Order of Required Filters</p>

<p>How to configure the filters is described on the pages above. This section details the order in which the filters should appear:</p>

<ol>
<li>SingleLogOutFilter (if you&rsquo;re using it)</li>
<li>AuthenticationFilter</li>
<li>TicketValidationFilter (whichever one is chosen)</li>
<li>HttpServletRequestWrapperFilter</li>
<li>AssertionThreadLocalFilter</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;listenerclass&gt;
</span><span class='line'>  org.jasig.cas.client.session.SingleSignOutHttpSessionListener&lt;/listener-class&gt;
</span><span class='line'>&lt;/listener&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NOTE: Special Things about CAS]]></title>
    <link href="http://poems.github.io/blog/2013/12/05/note-special-things-about-cas/"/>
    <updated>2013-12-05T02:49:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/12/05/note-special-things-about-cas</id>
    <content type="html"><![CDATA[<h1>1</h1>

<p><strong>Create the Certificate</strong></p>

<p>打开终端，进到 home 目录，运行命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keytool -genkey -alias tomcat -keyalg RSA -validity 365</span></code></pre></td></tr></table></div></figure>


<p>需要输入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter keystore password:
</span><span class='line'>Re-enter new password:
</span><span class='line'>What is your first and last name?
</span><span class='line'>  [Unknown]:  $REPLACE_WITH_FULL_MACHINE_NAME
</span><span class='line'>What is the name of your organizational unit?
</span><span class='line'>  [Unknown]:  Test
</span><span class='line'>What is the name of your organization?
</span><span class='line'>  [Unknown]:  Test
</span><span class='line'>What is the name of your City or Locality?
</span><span class='line'>  [Unknown]:  Test
</span><span class='line'>What is the name of your State or Province?
</span><span class='line'>  [Unknown]:  Test
</span><span class='line'>What is the two-letter country code for this unit?
</span><span class='line'>  [Unknown]:  US
</span><span class='line'>Is CN=$FULL_MACHINE_NAME, OU=Test, O=Test, L=Test, ST=Test, C=US correct?
</span><span class='line'>  [no]:  yes</span></code></pre></td></tr></table></div></figure>


<p>如何给这些值？</p>

<p>For the keystore password you should enter &ldquo;changeit&rdquo; without the quotation marks. When prompted for the first and last name, you should enter your machine name during development. The rest of the data does not matter. Then obviously answer &ldquo;yes&rdquo; to the question of whether it&rsquo;s correct.</p>

<blockquote><p>注意： CAS 协议需要走 HTTPS，为了保证能够工作， &ldquo;first and last name&rdquo; 为 $FULL_MACHINE_NAME。Mac 上获取计算机全名的方法是：<code>scutil --get ComputerName</code> 或者 <code>scutil --get LocalHostName</code>。</p></blockquote>

<p>下一步，打开 <code>$TOMCAT_HOME/conf/server.xml</code>，找到这一块，去掉注释即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!--
</span><span class='line'>&lt;Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
</span><span class='line'>    maxThreads="150" scheme="https" secure="true"
</span><span class='line'>    clientAuth="false" sslProtocol="TLS" /&gt;
</span><span class='line'>--&gt;</span></code></pre></td></tr></table></div></figure>


<p>重启 Tomcat，访问</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://$FULL_MACHINE_NAME:8443/</span></code></pre></td></tr></table></div></figure>


<p>Any application that wishes to securely connect to this Tomcat instance would need to import the certificate. You can export the certificate that&rsquo;s compatible with other JVM keystores by executing the following command:</p>

<p>所有想访问该 Tomcat 实例的应用都需要导入证书。首先导出证书，需要输入 keystore 的密码，这里就是 changeit：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keytool -export -alias tomcat -file server.crt</span></code></pre></td></tr></table></div></figure>


<p>输出是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter keystore password:
</span><span class='line'>Certificate stored in file &lt;server.crt&gt;</span></code></pre></td></tr></table></div></figure>


<p>You can then import the server.crt into other JVM keystore&rsquo;s by executing a command similar to this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keytool -import -file server.crt -keystore $JAVA_HOME/jre/lib/security/cacerts -alias tomcat</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s recommended that you add it to the JVM keystore of your local development machine to facilitate testing.</p>

<h1>2</h1>

<p><strong>Maven War Overlay</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://wiki.jasig.org/display/CASUM/Best+Practice+-+Setting+Up+CAS+Locally+using+the+Maven+WAR+Overlay+Method">Best Practice &ndash; Setting Up CAS Locally using the Maven WAR Overlay Method</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy war to Tomcat]]></title>
    <link href="http://poems.github.io/blog/2013/12/05/deploy-war-to-tomcat/"/>
    <updated>2013-12-05T02:28:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/12/05/deploy-war-to-tomcat</id>
    <content type="html"><![CDATA[<p>非常简单，<code>mvn package</code> 生成的 war 包，直接扔进 Tomcat 安装目录下的 webApps 目录。然后重启下 Tomcat。</p>

<p>不需要任何额外的配置，默认是 localhost:8080/war_name/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NOTE: Writing GNU Emacs Extensions]]></title>
    <link href="http://poems.github.io/blog/2013/12/04/note-writing-gnu-emacs-extensions/"/>
    <updated>2013-12-04T11:59:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/12/04/note-writing-gnu-emacs-extensions</id>
    <content type="html"><![CDATA[<h1>1￼</h1>

<p><strong>列表处理</strong></p>

<h2>1.1</h2>

<p><strong>Lisp 列表</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'(rose
</span><span class='line'>  violet
</span><span class='line'>  daisy
</span><span class='line'>  buttercup)</span></code></pre></td></tr></table></div></figure>


<h3>1.1.1</h3>

<p><strong>Lisp 原子</strong></p>

<p><code>()</code> 空列表</p>

<p>空列表既是原子，也是列表</p>

<p>原子和列表都叫做 <strong>符号表达式</strong>(symbolic expression)，简称 s-expression。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Help Command]]></title>
    <link href="http://poems.github.io/blog/2013/11/30/emacs-help-command/"/>
    <updated>2013-11-30T03:30:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/30/emacs-help-command</id>
    <content type="html"><![CDATA[<p>You have typed C-h, the help character.  Type a Help option:
(Use SPC or DEL to scroll through this text.  Type q to exit the Help command.)</p>

<p>常用的是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a PATTERN   Show commands whose name matches the PATTERN (a list of words
</span><span class='line'>              or a regexp).  See also the `apropos' command.              
</span><span class='line'>b           Display all key bindings.
</span><span class='line'>c KEYS      Display the command name run by the given key sequence.
</span><span class='line'>C CODING    Describe the given coding system, or RET for current ones.
</span><span class='line'>d PATTERN   Show a list of functions, variables, and other items whose
</span><span class='line'>              documentation matches the PATTERN (a list of words or a regexp).
</span><span class='line'>e           Go to the *Messages* buffer which logs echo-area messages.
</span><span class='line'>f FUNCTION  Display documentation for the given function.
</span><span class='line'>F COMMAND   Show the on-line manual's section that describes the command.
</span><span class='line'>g           Display information about the GNU project.
</span><span class='line'>h           Display the HELLO file which illustrates various scripts.
</span><span class='line'>i           Start the Info documentation reader: read on-line manuals.
</span><span class='line'>I METHOD    Describe a specific input method, or RET for current.
</span><span class='line'>k KEYS      Display the full documentation for the key sequence.
</span><span class='line'>K KEYS      Show the on-line manual's section for the command bound to KEYS.
</span><span class='line'>l           Show last 300 input keystrokes (lossage).
</span><span class='line'>L LANG-ENV  Describes a specific language environment, or RET for current.
</span><span class='line'>m           Display documentation of current minor modes and current major mode,
</span><span class='line'>              including their special commands.
</span><span class='line'>n           Display news of recent Emacs changes.
</span><span class='line'>p TOPIC     Find packages matching a given topic keyword.
</span><span class='line'>r           Display the Emacs manual in Info mode.
</span><span class='line'>s           Display contents of current syntax table, plus explanations.
</span><span class='line'>S SYMBOL    Show the section for the given symbol in the on-line manual
</span><span class='line'>              for the programming language used in this buffer.
</span><span class='line'>t           Start the Emacs learn-by-doing tutorial.
</span><span class='line'>v VARIABLE  Display the given variable's documentation and value.
</span><span class='line'>w COMMAND   Display which keystrokes invoke the given command (where-is).
</span><span class='line'>.           Display any available local help at point in the echo area.
</span><span class='line'>
</span><span class='line'>C-a         Information about Emacs.
</span><span class='line'>C-c         Emacs copying permission (GNU General Public License).
</span><span class='line'>C-d         Instructions for debugging GNU Emacs.
</span><span class='line'>C-e         External packages and information about Emacs.
</span><span class='line'>C-f         Emacs FAQ.
</span><span class='line'>C-m         How to order printed Emacs manuals.
</span><span class='line'>C-n         News of recent Emacs changes.
</span><span class='line'>C-o         Emacs ordering and distribution information.
</span><span class='line'>C-p         Info about known Emacs problems.
</span><span class='line'>C-t         Emacs TODO list.
</span><span class='line'>C-w         Information on absence of warranty for GNU Emacs.
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Survial with Evil &amp; Family]]></title>
    <link href="http://poems.github.io/blog/2013/11/29/emacs-survial-with-evil-and-family/"/>
    <updated>2013-11-29T23:33:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/29/emacs-survial-with-evil-and-family</id>
    <content type="html"><![CDATA[<h1>1 概览</h1>

<h2>1.1 安装 evil</h2>

<p>从网上找到的一个简易的方法，easy to be understood:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun require-package (package)
</span><span class='line'>  "Install given PACKAGE."
</span><span class='line'>  (unless (package-installed-p package)
</span><span class='line'>    (unless (assoc package package-archive-contents)
</span><span class='line'>      (package-refresh-contents))
</span><span class='line'>    (package-install package)))</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(require-package 'evil)
</span><span class='line'>(require 'evil)
</span><span class='line'>(evil-mode 1)</span></code></pre></td></tr></table></div></figure>


<h2>1.2 modes and states</h2>

<p>光标上用点颜色，看起来舒服点。红色是退回Emacs（使用<code>C-z</code>，再按一次<code>C-z</code>回到evil），</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq evil-emacs-state-cursor '("red" box))
</span><span class='line'>(setq evil-normal-state-cursor '("green" box))
</span><span class='line'>(setq evil-insert-state-cursor '("orange" bar))</span></code></pre></td></tr></table></div></figure>


<blockquote><p>这里有个terminology的区别：vim中的<em>mode</em>指的是Normal, Insert, Visual等，vim是模式编辑器。但是在Emacs中，<em>mode</em>是指对特定文本定义的一组快捷键。所以，evil把vim中的<em>mode</em>称作<em>state</em>。</p></blockquote>

<h1>2 设置</h1>

<p>通过一堆variable设置evil，可以通过 <code>M-x customize-group RET evil RET</code> 查看当前的设置。</p>

<p><code>setq</code>设置全局变量，<code>setq-default</code>设置buffer-local的变量，而且要在evil加载前修改<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq evil-shift-width 8) 
</span><span class='line'>;; Load Evil
</span><span class='line'>(require ’evil) . . .</span></code></pre></td></tr></table></div></figure>


<p>下面列出的variable，基本上默认值和vim的行为类似，但是<em>evil-want-C-u-scroll</em>默认不是t。</p>

<p><em>evil-auto-indent</em> [Variable]</p>

<blockquote><p>t(default), nil，类似vim中的autoindent。</p></blockquote>

<p><em>evil-shift-width</em> [Variable]</p>

<blockquote><p>The number of columns a line is shifted by the commands > and &lt;.</p></blockquote>

<p><em>evil-repeat-move-cursor</em> [Variable]</p>

<blockquote><p>如果t(default)，使用<code>.</code>重复时光标改变位置。</p></blockquote>

<p><em>evil-find-skip-newlines</em> [Variable]</p>

<blockquote><p>如果t，那么<em>f</em>，<em>F</em>，<em>t</em>，<em>T</em>会查找到其他行。nil(default)。</p></blockquote>

<p><em>evil-move-cursor-back</em> [Variable]</p>

<blockquote><p>t(default)，和vim的行为类似，退出insert state时，光标前移一格。</p></blockquote>

<p><em>evil-want-fine-undo</em> [Variable]</p>

<blockquote><p>If t, then a change-based action like cw may be undone in several steps. If nil (the default), then it is undone in one step.</p></blockquote>

<p><em>evil-regexp-search</em> [Variable]</p>

<blockquote><p>t(default)，<code>/</code>，<code>?</code>使用正则表达式</p></blockquote>

<p><em>evil-search-wrap</em> [Variable]</p>

<blockquote><p>t(default)，<code>/</code>，<code>?</code>搜索是到底后从头再搜索。</p></blockquote>

<p><em>evil-flash-delay</em> [Variable]</p>

<blockquote><p>The number of seconds to flash search matches when pressing n and N.</p></blockquote>

<p><em>evil-want-C-i-jump</em> [Variable]</p>

<blockquote><p>If t (the default), then C-i jumps forwards in the jump list. If nil, then C-i inserts a tab.</p></blockquote>

<p><em>evil-want-C-u-scroll</em> [Variable]</p>

<blockquote><p>If t, then C-u scrolls the buffer. If nil (the default), then C-u begins a numeric prefix argument.</p></blockquote>

<h2>2.1 The cursor</h2>

<p>这个之前也已经涉及过，现在全面了解下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq evil-emacs-state-cursor '("red" box))
</span><span class='line'>(setq evil-normal-state-cursor '("green" box))
</span><span class='line'>(setq evil-insert-state-cursor '("orange" bar))</span></code></pre></td></tr></table></div></figure>


<p>一共这么多：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>evil-default-cursor
</span><span class='line'>  The default cursor.
</span><span class='line'>evil-normal-state-cursor
</span><span class='line'>  The cursor for Normal state.
</span><span class='line'>evil-insert-state-cursor
</span><span class='line'>  The cursor for Insert state.
</span><span class='line'>evil-visual-state-cursor
</span><span class='line'>  The cursor for Visual state.
</span><span class='line'>evil-replace-state-cursor
</span><span class='line'>  The cursor for Replace state.
</span><span class='line'>evil-operator-state-cursor
</span><span class='line'>  The cursor for Operator-Pending state.
</span><span class='line'>evil-motion-state-cursor
</span><span class='line'>  The cursor for Motion state.
</span><span class='line'>evil-emacs-state-cursor
</span><span class='line'>  The cursor for Emacs state.</span></code></pre></td></tr></table></div></figure>


<h2>2.2 The initial state</h2>

<p>默认是进入 Normal State。我也就不修改了。</p>

<h1>3 Keymaps</h1>

<p>Evil 的键映射存储在多个keymaps中，每个 state 有一个全局的 keymap，比如对应于Normal State 的<code>evil-normal-state-map</code>。
通过 Emacs 的 <code>define-key</code> 来修改。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; bind key "w" to command foo
</span><span class='line'>(define-key evil-normal-state-map "w" ’foo)</span></code></pre></td></tr></table></div></figure>


<p><code>evil-maps.el</code> 包含所有的键绑定。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>evil-normal-state-map
</span><span class='line'>  The global keymap for Normal state.
</span><span class='line'>evil-insert-state-map
</span><span class='line'>  The global keymap for Insert state.
</span><span class='line'>evil-visual-state-map
</span><span class='line'>  The global keymap for Visual state.
</span><span class='line'>evil-replace-state-map
</span><span class='line'>  The global keymap for Replace state.
</span><span class='line'>evil-operator-state-map
</span><span class='line'>  The global keymap for Operator-Pending state.
</span><span class='line'>evil-motion-state-map
</span><span class='line'>  The global keymap for Motion state.</span></code></pre></td></tr></table></div></figure>


<p>每个 state 还有一个 buffer-local 的 keymap。也就是特定于该 buffer，优先于 global keymap。这些可以通过 mode hook 修改。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>evil-normal-state-local-map
</span><span class='line'>  Buffer-local keymap for Normal state.
</span><span class='line'>evil-insert-state-local-map
</span><span class='line'>  Buffer-local keymap for Insert state.
</span><span class='line'>evil-visual-state-local-map
</span><span class='line'>  Buffer-local keymap for Visual state.
</span><span class='line'>evil-replace-state-local-map
</span><span class='line'>  Buffer-local keymap for Replace state.
</span><span class='line'>evil-operator-state-local-map
</span><span class='line'>  Buffer-local keymap for Operator-Pending state.
</span><span class='line'>evil-motion-state-local-map
</span><span class='line'>  Buffer-local keymap for Motion state.</span></code></pre></td></tr></table></div></figure>


<h2>3.1 ‘evil-define-key’</h2>

<p>Evil 提供的方法，可以往 Emacs 的 keymap 中添加特定 state 的键绑定。比如:</p>

<p>定义了一个 minor mode，叫做 foo-mode。然后往该 mode 的 normal state 下修改键绑定。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(define-minor-mode foo-mode
</span><span class='line'>       "Foo mode."
</span><span class='line'>       :keymap (make-sparse-keymap))
</span><span class='line'>     (evil-define-key ’normal foo-mode-map "w" ’bar)
</span><span class='line'>     (evil-define-key ’normal foo-mode-map "e" ’baz)</span></code></pre></td></tr></table></div></figure>


<p>然后用 hook，添加到 text-mode-hook 里。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-hook ’text-mode-hook ’foo-mode) ; enable alongside text-mode</span></code></pre></td></tr></table></div></figure>


<h2>Appendix 1</h2>

<p>什么是 vim 的 magic？</p>

<p>主要涉及到正则表达式。先留几个参考资料：</p>

<ol>
<li><a href="http://vimdoc.sourceforge.net/htmldoc/pattern.html#/magic">vimdoc</a></li>
<li><a href="http://vim.wikia.com/wiki/Simplifying_regular_expressions_using_magic_and_no-magic">vim.vikia</a></li>
</ol>


<p><strong>To Be Continued</strong></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Strictly speaking, the order only matters if the variable affects the way Evil is loaded. This is the case with some of the ‘evil-want-’ variables.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Useful Tricks]]></title>
    <link href="http://poems.github.io/blog/2013/11/29/linux-useful-tricks/"/>
    <updated>2013-11-29T08:18:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/29/linux-useful-tricks</id>
    <content type="html"><![CDATA[<h2>课后任务</h2>

<p>使用vagrant搭建Linux虚拟机</p>

<p><a href="http://docs.vagrantup.com/v2/getting-started/index.html">官方网址</a></p>

<p>1 首先安装 <a href="http://www.virtualbox.org/">virtualbox</a></p>

<p>2 安装<a href="http://docs.vagrantup.com/v2/installation/">vagrant</a></p>

<p>3 打开cmd，或者终端，运行以下命令，注意这一步会下载一个Linux发行版，大约3，400M吧。所以，你也可以用迅雷到网上下载下来，然后把 <code>http://files.vagrantup.com/precise32.box</code> 改成你文件的路径，比如我的是<code>file:///Users/pieux/Documents/o/precise32.box</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init precise32 http://files.vagrantup.com/precise32.box
</span><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<p>4 SSH 进入linux吧！<code>vagrant ssh</code>，退出就是 <code>exit</code></p>

<p>5 关闭Linux的命令是，休眠<code>vagrant suspend</code>，或者关闭<code>vagrant halt</code>。</p>

<h2>man 命令</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1    使用者在shell中可以操作的指令或可执行档
</span><span class='line'>2 系統核心可呼叫的函数与工具等
</span><span class='line'>3 一些常用的函数(function)与函数库(library)，大部分是C的函数库(libc)
</span><span class='line'>4 装置档案的说明，通常在/dev下的档案
</span><span class='line'>5 设定档或者是某些档案的格式
</span><span class='line'>6 游戏(games)
</span><span class='line'>7 惯例与协定等，例如Linux档案系统、网络协定、ASCII code等等的說明
</span><span class='line'>8 系統管理員可用的管理指令
</span><span class='line'>9 跟kernel有关的文件</span></code></pre></td></tr></table></div></figure>


<h2>tree 命令</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tree
</span><span class='line'>-a
</span><span class='line'>-A
</span><span class='line'>-C
</span><span class='line'>man tree</span></code></pre></td></tr></table></div></figure>


<h1>shell 快捷键</h1>

<p>编辑命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ctrl + a ：移到命令行首
</span><span class='line'>Ctrl + e ：移到命令行尾
</span><span class='line'>Ctrl + f ：按字符前移（右向）
</span><span class='line'>Ctrl + b ：按字符后移（左向）
</span><span class='line'>Alt + f ：按单词前移（右向）
</span><span class='line'>Alt + b ：按单词后移（左向）
</span><span class='line'>Ctrl + u ：从光标处删除至命令行首
</span><span class='line'>Ctrl + k ：从光标处删除至命令行尾
</span><span class='line'>Ctrl + d ：删除光标处的字符
</span><span class='line'>Ctrl + y ：粘贴至光标后</span></code></pre></td></tr></table></div></figure>


<p>重新执行命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ctrl + r：逆向搜索命令历史
</span><span class='line'>Ctrl + g：从历史搜索模式退出
</span><span class='line'>Ctrl + p：历史中的上一条命令
</span><span class='line'>Ctrl + n：历史中的下一条命令</span></code></pre></td></tr></table></div></figure>


<p>控制命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ctrl + l：清屏
</span><span class='line'>Ctrl + s：阻止屏幕输出
</span><span class='line'>Ctrl + q：允许屏幕输出
</span><span class='line'>Ctrl + c：终止命令
</span><span class='line'>Ctrl + z：挂起命令</span></code></pre></td></tr></table></div></figure>


<h2>grep 命令</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep
</span><span class='line'>-v 反选
</span><span class='line'>-E 正则
</span><span class='line'>-i 忽略大小写
</span><span class='line'>-n 加上行号</span></code></pre></td></tr></table></div></figure>


<p>简单的正则表达式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>^ 行首
</span><span class='line'>$ 行尾
</span><span class='line'>. 任意字符
</span><span class='line'>* &gt;0个重复
</span><span class='line'>+ &gt;1个重复
</span><span class='line'>[Gg], [A-Za-z]
</span><span class='line'>\&lt; 单词首
</span><span class='line'>\&gt; 单词尾</span></code></pre></td></tr></table></div></figure>


<h2>进程相关</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps -aux | grep process-name
</span><span class='line'>pgrep
</span><span class='line'>kill
</span><span class='line'>pkill
</span><span class='line'>killall</span></code></pre></td></tr></table></div></figure>


<h2>find</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find -name
</span><span class='line'>find -not -name
</span><span class='line'>-i
</span><span class='line'>-type fdl
</span><span class='line'>-mindepth 3
</span><span class='line'>-maxdepth 3
</span><span class='line'>-exec ls -l {} \;
</span><span class='line'>| xargs ls -l</span></code></pre></td></tr></table></div></figure>


<h2>其他</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch 创建文件
</span><span class='line'>alias 别名
</span><span class='line'>history
</span><span class='line'>sudo !! 重执行上一条命令
</span><span class='line'>cd - 进入之前的目录
</span><span class='line'>wc
</span><span class='line'>chmod 
</span><span class='line'>du -hd 1
</span><span class='line'>du -h --max-depth=1
</span><span class='line'>Ctrl-Z 挂起
</span><span class='line'>fg 恢复
</span><span class='line'>&gt; .gitignore
</span><span class='line'>&lt; .gitignore
</span><span class='line'>mv filename.{old,new}
</span><span class='line'>rm !(*.foo|*.bar|*.baz)</span></code></pre></td></tr></table></div></figure>


<h2>git 相关</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add -A
</span><span class='line'>git reset --soft
</span><span class='line'>git reset --mixed
</span><span class='line'>git reset --hard</span></code></pre></td></tr></table></div></figure>


<h2>学习资料推荐</h2>

<p><a href="http://www.commandlinefu.com/commands/tagged/800/commandfu">http://www.commandlinefu.com/commands/tagged/800/commandfu</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JRuby Small Memos]]></title>
    <link href="http://poems.github.io/blog/2013/11/27/jruby-small-memos/"/>
    <updated>2013-11-27T23:22:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/27/jruby-small-memos</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jruby --version</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jruby -e "puts 'This is a short program'"
</span><span class='line'>This is a short program</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jirb
</span><span class='line'>irb(main):001:0&gt; ['Hello', 'world'].join ' '
</span><span class='line'>=&gt; "Hello world"
</span><span class='line'>irb(main):002:0&gt; "ybuRJ morf".reverse
</span><span class='line'>=&gt; ufrom JRuby"
</span><span class='line'>irb(main):003:0&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ease Life with YASnippet]]></title>
    <link href="http://poems.github.io/blog/2013/11/24/ease-life-with-yasnippet/"/>
    <updated>2013-11-24T01:44:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/24/ease-life-with-yasnippet</id>
    <content type="html"><![CDATA[<p>安装使用<code>package-install</code>，实际上可以写一个简易方法避免重复劳动：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun require-package (package)
</span><span class='line'>  "Install given PACKAGE."
</span><span class='line'>  (unless (package-installed-p package)
</span><span class='line'>    (unless (assoc package package-archive-contents)
</span><span class='line'>      (package-refresh-contents))
</span><span class='line'>    (package-install package)))
</span></code></pre></td></tr></table></div></figure>


<p>学习下其中的1个function</p>

<p><code>assoc</code> is a built-in function in `C source code&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(assoc KEY LIST)</span></code></pre></td></tr></table></div></figure>


<p>Return non-nil if KEY is `equal&#8217; to the car of an element of LIST.
The value is actually the first element of LIST whose car equals KEY.</p>

<p>开始学习如何使用YASnippet。</p>

<p><strong>1 组织你的 Snippets</strong> (<em>Organizing Snippets</em>)</p>

<p>Snippet的定义是储存在文件系统的文件中。YASnippet的触发机制会找到这些snippet tables，然后展开。</p>

<p>首先，新建一个目录：my-snippets，用来存放自定义的snippets。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(require 'yasnippet)
</span><span class='line'>
</span><span class='line'>(setq yas-snippet-dirs (concat user-emacs-directory "my-snippets"))
</span><span class='line'>
</span><span class='line'>(add-hook 'prog-mode-hook 'yas-minor-mode)</span></code></pre></td></tr></table></div></figure>


<p>看下是怎么组织snippets的（这是YASnippet自带的）：</p>

<p><code>.yas.parent</code>文件可以共享其他目录下的snippets。</p>

<p>如果有一个空的<code>.yas-make-groups</code>文件，会在 YASnippet Menu按照目录结构组织地更清晰。</p>

<p><strong>2 展开你的 Snippets</strong> (<em>Traiggering expansion</em>)</p>

<p>很多中方式能展开snippets，包括：</p>

<ul>
<li><p>By typing an abbrev, the snippet trigger key, and then pressing the key defined in yas/trigger-key (which defaults to &ldquo;TAB&rdquo;). This works in buffers where the minor mode yas/minor-mode is active;</p></li>
<li><p>By invoking the command yas/insert-snippet (either by typing M-x yas/insert-snippet or its keybinding). This does not require yas/minor-mode to be active.</p></li>
<li><p>By using hippie-expand</p></li>
</ul>


<p>以上是3中最常见的方法（虽然我不知道什么是 hippie-expand）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[macro &amp; defmacro in Emacs]]></title>
    <link href="http://poems.github.io/blog/2013/11/23/macro-and-defmacro-in-emacs/"/>
    <updated>2013-11-23T16:42:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/23/macro-and-defmacro-in-emacs</id>
    <content type="html"><![CDATA[<p>学习下Lisp的宏（macro）。</p>

<p>首先，区别：Lisp宏和键盘宏（keyboard macro）是两个不同的概念。</p>

<p>一个LISP宏(Lisp Macro)是一个扩展LISP语言的用户定义的结构.
 宏不像函数那样对参数执行表达式. 它们只是在构造一个包括这些参数的表达式.</p>

<blockquote><p>也就是，宏是一个结构，是在构造。就是Lisp非常牛逼的一点：Code as data。</p></blockquote>

<p>首先看下语法定义：</p>

<p><code>defmacro</code> is a Lisp macro in `byte-run.el&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defmacro NAME ARGLIST &optional DOCSTRING DECL &rest BODY)</span></code></pre></td></tr></table></div></figure>


<p>Define NAME as a macro.
When the macro is called, as in (NAME ARGS&hellip;),
the function (lambda ARGLIST BODY&hellip;) is applied to
the list ARGS&hellip; as it appears in the expression,
and the result should be a form to be evaluated instead of the original.
DECL is a declaration, optional, of the form (declare DECLS&hellip;) where
DECLS is a list of elements of the form (PROP . VALUES).  These are
interpreted according to `macro-declarations-alist&#8217;.
The return value is undefined.</p>

<p>好长的解释。</p>

<p>看一个实例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defmacro inc (var)
</span><span class='line'>  (list 'setq var (list '1+ var)))
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意一点：<code>(list '1+ var)</code> 开始时写成<code>(list '1+var)</code>，少写了一个空格。</p></blockquote>

<p>定义了一个Lisp宏：<code>inc (var)</code>。这个macro的BODY是（按照list函数拼出来）:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq var (1+ var))</span></code></pre></td></tr></table></div></figure>


<p>当然也可以这样展开宏：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(macroexpand '(inc x))</span></code></pre></td></tr></table></div></figure>


<p>现在就可以用宏了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq x 1)
</span><span class='line'>(inc x)</span></code></pre></td></tr></table></div></figure>


<blockquote><p>解释:</p></blockquote>

<p><code>list</code> 的用法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>list is a built-in function in `C source code'.
</span><span class='line'>
</span><span class='line'>(list &rest OBJECTS)
</span><span class='line'>
</span><span class='line'>Return a newly created list with specified arguments as elements.
</span><span class='line'>Any number of arguments, even zero arguments, are allowed.
</span></code></pre></td></tr></table></div></figure>


<p>宏还有一种写法，就是使用反引用（Backquote）。</p>

<p>我们可以用 &lsquo; 引用一个对象并不执行.我们还可以用 反引用 ` 引用一个列表, 但是只是选择性的执行列表的元素.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Growing Emacser]]></title>
    <link href="http://poems.github.io/blog/2013/11/23/a-growing-emacser/"/>
    <updated>2013-11-23T16:00:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/23/a-growing-emacser</id>
    <content type="html"><![CDATA[<hr />

<p><code>when:</code> when is a lisp macro</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(when COND BODY...)</span></code></pre></td></tr></table></div></figure>


<p>If COND yields non-nil, do BODY, else return nil.
When COND yields non-nil, eval BODY forms sequentially and return
value of last one, or nil if there are none.</p>

<hr />

<p><code>fboundp</code> is a built-in function in `C source code&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(fboundp SYMBOL)</span></code></pre></td></tr></table></div></figure>


<hr />

<p><code>add-to-list</code> is a compiled Lisp function in `subr.el&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-to-list LIST-VAR ELEMENT &optional APPEND COMPARE-FN)</span></code></pre></td></tr></table></div></figure>


<p>Add ELEMENT to the value of <code>LIST-VAR</code> if it isn&rsquo;t there yet.
The test for presence of <code>ELEMENT</code> is done with <code>equal</code>,
or with <code>COMPARE-FN</code> if that&rsquo;s non-nil.
If <code>ELEMENT</code> is added, it is added at the beginning of the list,
unless the optional argument <code>APPEND</code> is non-nil, in which case
ELEMENT is added at the end.</p>

<p>The return value is the new value of LIST-VAR.</p>

<hr />

<p><code>provide</code> is a built-in function in `C source code&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(provide FEATURE &optional SUBFEATURES)</span></code></pre></td></tr></table></div></figure>


<p>Announce that FEATURE is a feature of the current Emacs.
The optional argument SUBFEATURES should be a list of symbols listing
particular subfeatures supported in this version of FEATURE.</p>

<hr />

<p><code>C-x h</code> runs the command mark-whole-buffer</p>

<p><code>C-w</code> runs the command kill region</p>

<hr />

<p>use <code>C-x &lt;right&gt;</code>, <code>C-x &lt;left&gt;</code> to cycle around in the buffer ring.</p>

<p><code>iswitchb-mode</code> replaces the default C-x b behaviour with a very intuitive buffer-switching-with-completion system.</p>

<p>The related commands are <code>C-x b</code>, <code>C-s</code> and <code>C-r</code>.</p>

<hr />

<p>Dired Mode 非常别扭，很多无用的快捷键。</p>

<p>emacs <code>dired</code> (Directory Editor)mode.</p>

<p><code>C-x d</code>: enter dired mode(use <code>M-x RET dired RET</code> is quick too)</p>

<p><code>C-x 4 d</code>: <code>dired-other-window</code></p>

<p><code>C-x C-j</code>: (dired-jump to current file)</p>

<p><code>q</code>: quit</p>

<p><code>R</code> to rename the file (or &lsquo;dired-do-rename&rsquo;).</p>

<p><code>C-x k RET</code> to go back to the (renamed) buffer</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A example of writing Exception in java]]></title>
    <link href="http://poems.github.io/blog/2013/11/23/a-example-of-writing-exception-in-java/"/>
    <updated>2013-11-23T07:49:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/23/a-example-of-writing-exception-in-java</id>
    <content type="html"><![CDATA[<p>记录在阅读 Jasig Cas 的源码学习到的 Java 知识。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public abstract class AuthenticationException extends Exception {
</span></code></pre></td></tr></table></div></figure>


<p>首先，这是一个 abstract class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/** The code to return for resolving to a message description. */
</span><span class='line'>private String code;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Method to return the unique identifier for this error type.
</span><span class='line'> *
</span><span class='line'> * @return the String identifier for this error type.
</span><span class='line'> */
</span><span class='line'>public final String getCode() {
</span><span class='line'>    return this.code;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>使用 code，来解析异常消息的描述。
并且，code 有一个 get 方法，final 不可继承。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/** The error type that provides additional info about the nature of the exception cause **/
</span><span class='line'>private String type = "error";
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Method to return the error type of this exception
</span><span class='line'> *
</span><span class='line'> * @return the String identifier for the cause of this error.
</span><span class='line'> */
</span><span class='line'>public final String getType() {
</span><span class='line'>    return this.type;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>额外的一个 field: type，维护导致异常的本质信息。</p>

<p>下面是 <code>AuthenticationException</code> 的 constructors。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public AuthenticationException(final String code) {
</span><span class='line'>    this.code = code;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这是第1个 constructor。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public AuthenticationException(final String code, final String msg) {
</span><span class='line'>    super(msg);
</span><span class='line'>    this.code = code;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public AuthenticationException(final String code, final String msg, final String type) {
</span><span class='line'>    super(msg);
</span><span class='line'>    this.code = code;
</span><span class='line'>    this.type = type;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>第2个和第3个 constructor，需要学习的是 <code>super(msg)</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Constructor that takes a code description of the error and the chained
</span><span class='line'> * exception. These codes normally have a corresponding entries in the
</span><span class='line'> * messages file for the internationalization of error messages.
</span><span class='line'> *
</span><span class='line'> * @param code The short unique identifier for this error.
</span><span class='line'> * @param throwable The chained exception for this AuthenticationException
</span><span class='line'> */
</span><span class='line'>public AuthenticationException(final String code, final Throwable throwable) {
</span><span class='line'>    super(throwable);
</span><span class='line'>    this.code = code;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>最后一个 constructor，需要学习的是 <code>final Throwable throwable</code>，这块不是很懂。按描述是能链式异常。
查看了 <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Exception.html#Exception(java.lang.Throwable)">Java Exception 文档</a>，它有一个 constructor：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Exception(Throwable cause)</span></code></pre></td></tr></table></div></figure>


<p>它的作用是：用指定的 cause 和 详细的 message(<code>cause==null ? null : cause.toString()</code>)构造新的异常。
它的作用就是一个 &ldquo;wrapper&#8221;。</p>

<p>完整源码见：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> * Licensed to Jasig under one or more contributor license
</span><span class='line'> * agreements. See the NOTICE file distributed with this work
</span><span class='line'> * for additional information regarding copyright ownership.
</span><span class='line'> * Jasig licenses this file to you under the Apache License,
</span><span class='line'> * Version 2.0 (the "License"); you may not use this file
</span><span class='line'> * except in compliance with the License.  You may obtain a
</span><span class='line'> * copy of the License at the following location:
</span><span class='line'> *
</span><span class='line'> *   http://www.apache.org/licenses/LICENSE-2.0
</span><span class='line'> *
</span><span class='line'> * Unless required by applicable law or agreed to in writing,
</span><span class='line'> * software distributed under the License is distributed on an
</span><span class='line'> * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
</span><span class='line'> * KIND, either express or implied.  See the License for the
</span><span class='line'> * specific language governing permissions and limitations
</span><span class='line'> * under the License.
</span><span class='line'> */
</span><span class='line'>package org.jasig.cas.authentication.handler;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * The most generic type of authentication exception that one can catch if not
</span><span class='line'> * sure what specific implementation will be thrown. Top of the tree of all
</span><span class='line'> * other AuthenticationExceptions.
</span><span class='line'> *
</span><span class='line'> * @author Scott Battaglia
</span><span class='line'> * @version $Revision$ $Date$
</span><span class='line'> * @since 3.0
</span><span class='line'> */
</span><span class='line'>public abstract class AuthenticationException extends Exception {
</span><span class='line'>
</span><span class='line'>    /** Serializable ID. */
</span><span class='line'>    private static final long serialVersionUID = 3906648604830611762L;
</span><span class='line'>
</span><span class='line'>    /** The code to return for resolving to a message description. */
</span><span class='line'>    private String code;
</span><span class='line'>
</span><span class='line'>    /** The error type that provides additional info about the nature of the exception cause **/
</span><span class='line'>    private String type = "error";
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Constructor that takes a code description of the error. These codes
</span><span class='line'>     * normally have a corresponding entries in the messages file for the
</span><span class='line'>     * internationalization of error messages.
</span><span class='line'>     *
</span><span class='line'>     * @param code The short unique identifier for this error.
</span><span class='line'>     */
</span><span class='line'>    public AuthenticationException(final String code) {
</span><span class='line'>        this.code = code;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Constructor that takes a &lt;code&gt;code&lt;/code&gt; description of the error along with the exception
</span><span class='line'>     * &lt;code&gt;msg&lt;/code&gt; generally for logging purposes. These codes normally have a corresponding
</span><span class='line'>     * entries in the messages file for the internationalization of error messages.
</span><span class='line'>     *
</span><span class='line'>     * @param code The short unique identifier for this error.
</span><span class='line'>     * @param msg The error message associated with this exception for additional logging purposes.
</span><span class='line'>     */
</span><span class='line'>    public AuthenticationException(final String code, final String msg) {
</span><span class='line'>        super(msg);
</span><span class='line'>        this.code = code;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Constructor that takes a &lt;code&gt;code&lt;/code&gt; description of the error along with the exception
</span><span class='line'>     * &lt;code&gt;msg&lt;/code&gt; generally for logging purposes and the &lt;code&gt;type&lt;/code&gt; of the error that originally caused the exception.
</span><span class='line'>     * These codes normally have a corresponding entries in the messages file for the internationalization of error messages.
</span><span class='line'>     *
</span><span class='line'>     * @param code The short unique identifier for this error.
</span><span class='line'>     * @param msg The error message associated with this exception for additional logging purposes.
</span><span class='line'>     * @param type The type of the error message that caused the exception to be thrown. By default,
</span><span class='line'>     * all errors are considered of &lt;code&gt;error&lt;/code&gt;.
</span><span class='line'>     */
</span><span class='line'>    public AuthenticationException(final String code, final String msg, final String type) {
</span><span class='line'>        super(msg);
</span><span class='line'>        this.code = code;
</span><span class='line'>        this.type = type;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Constructor that takes a code description of the error and the chained
</span><span class='line'>     * exception. These codes normally have a corresponding entries in the
</span><span class='line'>     * messages file for the internationalization of error messages.
</span><span class='line'>     *
</span><span class='line'>     * @param code The short unique identifier for this error.
</span><span class='line'>     * @param throwable The chained exception for this AuthenticationException
</span><span class='line'>     */
</span><span class='line'>    public AuthenticationException(final String code, final Throwable throwable) {
</span><span class='line'>        super(throwable);
</span><span class='line'>        this.code = code;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Method to return the error type of this exception
</span><span class='line'>     *
</span><span class='line'>     * @return the String identifier for the cause of this error.
</span><span class='line'>     */
</span><span class='line'>    public final String getType() {
</span><span class='line'>        return this.type;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Method to return the unique identifier for this error type.
</span><span class='line'>     *
</span><span class='line'>     * @return the String identifier for this error type.
</span><span class='line'>     */
</span><span class='line'>    public final String getCode() {
</span><span class='line'>        return this.code;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public final String toString() {
</span><span class='line'>        String msg = getCode();
</span><span class='line'>        if (getMessage() != null && getMessage().trim().length() &gt; 0)
</span><span class='line'>            msg = ":" + getMessage();
</span><span class='line'>        return msg;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Blank Page for Test]]></title>
    <link href="http://poems.github.io/blog/2013/11/02/a-blank-page-for-test/"/>
    <updated>2013-11-02T11:23:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/02/a-blank-page-for-test</id>
    <content type="html"><![CDATA[<h1>A Blank Page for Test</h1>
]]></content>
  </entry>
  
</feed>

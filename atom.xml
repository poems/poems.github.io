<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://poems.github.io/atom.xml" rel="self"/>
  <link href="http://poems.github.io/"/>
  <updated>2013-12-04T11:33:57+00:00</updated>
  <id>http://poems.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Emacs Help Command]]></title>
    <link href="http://poems.github.io/blog/2013/11/30/emacs-help-command/"/>
    
    <updated>2013-11-30T03:30:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/30/emacs-help-command</id>
    
    <content type="html"><![CDATA[<p>You have typed C-h, the help character.  Type a Help option:
(Use SPC or DEL to scroll through this text.  Type q to exit the Help command.)</p>

<p>常用的是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>```
</span></code></pre></td></tr></table></div></figure>


<p>a PATTERN   Show commands whose name matches the PATTERN (a list of words</p>

<pre><code>          or a regexp).  See also the `apropos' command.              
</code></pre>

<p>b           Display all key bindings.
c KEYS      Display the command name run by the given key sequence.
C CODING    Describe the given coding system, or RET for current ones.
d PATTERN   Show a list of functions, variables, and other items whose</p>

<pre><code>          documentation matches the PATTERN (a list of words or a regexp).
</code></pre>

<p>e           Go to the <em>Messages</em> buffer which logs echo-area messages.
f FUNCTION  Display documentation for the given function.
F COMMAND   Show the on-line manual&rsquo;s section that describes the command.
g           Display information about the GNU project.
h           Display the HELLO file which illustrates various scripts.
i           Start the Info documentation reader: read on-line manuals.
I METHOD    Describe a specific input method, or RET for current.
k KEYS      Display the full documentation for the key sequence.
K KEYS      Show the on-line manual&rsquo;s section for the command bound to KEYS.
l           Show last 300 input keystrokes (lossage).
L LANG-ENV  Describes a specific language environment, or RET for current.
m           Display documentation of current minor modes and current major mode,</p>

<pre><code>          including their special commands.
</code></pre>

<p>n           Display news of recent Emacs changes.
p TOPIC     Find packages matching a given topic keyword.
r           Display the Emacs manual in Info mode.
s           Display contents of current syntax table, plus explanations.
S SYMBOL    Show the section for the given symbol in the on-line manual</p>

<pre><code>          for the programming language used in this buffer.
</code></pre>

<p>t           Start the Emacs learn-by-doing tutorial.
v VARIABLE  Display the given variable&rsquo;s documentation and value.
w COMMAND   Display which keystrokes invoke the given command (where-is).
.           Display any available local help at point in the echo area.</p>

<p>C-a         Information about Emacs.
C-c         Emacs copying permission (GNU General Public License).
C-d         Instructions for debugging GNU Emacs.
C-e         External packages and information about Emacs.
C-f         Emacs FAQ.
C-m         How to order printed Emacs manuals.
C-n         News of recent Emacs changes.
C-o         Emacs ordering and distribution information.
C-p         Info about known Emacs problems.
C-t         Emacs TODO list.
C-w         Information on absence of warranty for GNU Emacs.</p>

<p>&#8220;`</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Emacs Survial with Evil &amp; Family]]></title>
    <link href="http://poems.github.io/blog/2013/11/29/emacs-survial-with-evil-and-family/"/>
    
    <updated>2013-11-29T23:33:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/29/emacs-survial-with-evil-and-family</id>
    
    <content type="html"><![CDATA[<h1>1 概览</h1>

<h2>1.1 安装 evil</h2>

<p>从网上找到的一个简易的方法，easy to be understood:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun require-package (package)
</span><span class='line'>  "Install given PACKAGE."
</span><span class='line'>  (unless (package-installed-p package)
</span><span class='line'>    (unless (assoc package package-archive-contents)
</span><span class='line'>      (package-refresh-contents))
</span><span class='line'>    (package-install package)))</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(require-package 'evil)
</span><span class='line'>(require 'evil)
</span><span class='line'>(evil-mode 1)</span></code></pre></td></tr></table></div></figure>


<h2>1.2 modes and states</h2>

<p>光标上用点颜色，看起来舒服点。红色是退回Emacs（使用<code>C-z</code>，再按一次<code>C-z</code>回到evil），</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq evil-emacs-state-cursor '("red" box))
</span><span class='line'>(setq evil-normal-state-cursor '("green" box))
</span><span class='line'>(setq evil-insert-state-cursor '("orange" bar))</span></code></pre></td></tr></table></div></figure>


<blockquote><p>这里有个terminology的区别：vim中的<em>mode</em>指的是Normal, Insert, Visual等，vim是模式编辑器。但是在Emacs中，<em>mode</em>是指对特定文本定义的一组快捷键。所以，evil把vim中的<em>mode</em>称作<em>state</em>。</p></blockquote>

<h1>2 设置</h1>

<p>通过一堆variable设置evil，可以通过 <code>M-x customize-group RET evil RET</code> 查看当前的设置。</p>

<p><code>setq</code>设置全局变量，<code>setq-default</code>设置buffer-local的变量，而且要在evil加载前修改<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq evil-shift-width 8) 
</span><span class='line'>;; Load Evil(require ’evil) . . .</span></code></pre></td></tr></table></div></figure>


<p>下面列出的variable，基本上默认值和vim的行为类似，但是<em>evil-want-C-u-scroll</em>默认不是t。</p>

<p><em>evil-auto-indent</em> [Variable]</p>

<blockquote><p>t(default), nil，类似vim中的autoindent。</p></blockquote>

<p><em>evil-shift-width</em> [Variable]</p>

<blockquote><p>The number of columns a line is shifted by the commands > and &lt;.</p></blockquote>

<p><em>evil-repeat-move-cursor</em> [Variable]</p>

<blockquote><p>如果t(default)，使用<code>.</code>重复时光标改变位置。</p></blockquote>

<p><em>evil-find-skip-newlines</em> [Variable]</p>

<blockquote><p>如果t，那么<em>f</em>，<em>F</em>，<em>t</em>，<em>T</em>会查找到其他行。nil(default)。</p></blockquote>

<p><em>evil-move-cursor-back</em> [Variable]</p>

<blockquote><p>t(default)，和vim的行为类似，退出insert state时，光标前移一格。</p></blockquote>

<p><em>evil-want-fine-undo</em> [Variable]</p>

<blockquote><p>If t, then a change-based action like cw may be undone in several steps. If nil (the default), then it is undone in one step.</p></blockquote>

<p><em>evil-regexp-search</em> [Variable]</p>

<blockquote><p>t(default)，<code>/</code>，<code>?</code>使用正则表达式</p></blockquote>

<p><em>evil-search-wrap</em> [Variable]</p>

<blockquote><p>t(default)，<code>/</code>，<code>?</code>搜索是到底后从头再搜索。</p></blockquote>

<p><em>evil-flash-delay</em> [Variable]</p>

<blockquote><p>The number of seconds to flash search matches when pressing n and N.</p></blockquote>

<p><em>evil-want-C-i-jump</em> [Variable]</p>

<blockquote><p>If t (the default), then C-i jumps forwards in the jump list. If nil, then C-i inserts a tab.</p></blockquote>

<p><em>evil-want-C-u-scroll</em> [Variable]</p>

<blockquote><p>If t, then C-u scrolls the buffer. If nil (the default), then C-u begins a numeric prefix argument.</p></blockquote>

<h2>2.1 The cursor</h2>

<p>这个之前也已经涉及过，现在全面了解下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq evil-emacs-state-cursor '("red" box))
</span><span class='line'>(setq evil-normal-state-cursor '("green" box))
</span><span class='line'>(setq evil-insert-state-cursor '("orange" bar))</span></code></pre></td></tr></table></div></figure>


<p>一共这么多：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>evil-default-cursor  The default cursor.evil-normal-state-cursor The cursor for Normal state.evil-insert-state-cursor    The cursor for Insert state.evil-visual-state-cursor    The cursor for Visual state.evil-replace-state-cursor   The cursor for Replace state.evil-operator-state-cursor The cursor for Operator-Pending state.evil-motion-state-cursor  The cursor for Motion state.evil-emacs-state-cursor The cursor for Emacs state.</span></code></pre></td></tr></table></div></figure>


<h2>2.2 The initial state默认是进入 Normal State。我也就不修改了。</h2>

<h1>3 Keymaps</h1>

<p>Evil 的键映射存储在多个keymaps中，每个 state 有一个全局的 keymap，比如对应于Normal State 的<code>evil-normal-state-map</code>。
通过 Emacs 的 <code>define-key</code> 来修改。
<code>;; bind key "w" to command foo
(define-key evil-normal-state-map "w" ’foo)</code>
<code>evil-maps.el</code> 包含所有的键绑定。
<code>
evil-normal-state-map   The global keymap for Normal state.evil-insert-state-map    The global keymap for Insert state.evil-visual-state-map    The global keymap for Visual state.evil-replace-state-map   The global keymap for Replace state.evil-operator-state-map The global keymap for Operator-Pending state.evil-motion-state-map  The global keymap for Motion state.</code>每个 state 还有一个 buffer-local 的 keymap。也就是特定于该 buffer，优先于 global keymap。这些可以通过 mode hook 修改。
<code>
evil-normal-state-local-map Buffer-local keymap for Normal state.evil-insert-state-local-map    Buffer-local keymap for Insert state.evil-visual-state-local-map    Buffer-local keymap for Visual state.evil-replace-state-local-map   Buffer-local keymap for Replace state.evil-operator-state-local-map Buffer-local keymap for Operator-Pending state.evil-motion-state-local-map  Buffer-local keymap for Motion state.</code></p>

<h2>3.1 ‘evil-define-key’</h2>

<p>Evil 提供的方法，可以往 Emacs 的 keymap 中添加特定 state 的键绑定。比如:</p>

<p>定义了一个 minor mode，叫做 foo-mode。然后往该 mode 的 normal state 下修改键绑定。<code>
(define-minor-mode foo-mode       "Foo mode."       :keymap (make-sparse-keymap))     (evil-define-key ’normal foo-mode-map "w" ’bar)     (evil-define-key ’normal foo-mode-map "e" ’baz)</code>然后用 hook，添加到 text-mode-hook 里。
<code>
(add-hook ’text-mode-hook ’foo-mode) ; enable alongside text-mode</code></p>

<h2>Appendix 1</h2>

<p>什么是 vim 的 magic？</p>

<p>主要涉及到正则表达式。先留几个参考资料：</p>

<ol>
<li><a href="http://vimdoc.sourceforge.net/htmldoc/pattern.html#/magic">vimdoc</a></li>
<li><a href="http://vim.wikia.com/wiki/Simplifying_regular_expressions_using_magic_and_no-magic">vim.vikia</a></li>
</ol>


<p><strong>To Be Continued</strong></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Strictly speaking, the order only matters if the variable affects the way Evil is loaded. This is the case with some of the ‘evil-want-’ variables.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Linux Useful Tricks]]></title>
    <link href="http://poems.github.io/blog/2013/11/29/linux-useful-tricks/"/>
    
    <updated>2013-11-29T08:18:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/29/linux-useful-tricks</id>
    
    <content type="html"><![CDATA[<h2>课后任务</h2>

<p>使用vagrant搭建Linux虚拟机</p>

<p><a href="http://docs.vagrantup.com/v2/getting-started/index.html">官方网址</a></p>

<p>1 首先安装 <a href="http://www.virtualbox.org/">virtualbox</a></p>

<p>2 安装<a href="http://docs.vagrantup.com/v2/installation/">vagrant</a></p>

<p>3 打开cmd，或者终端，运行以下命令，注意这一步会下载一个Linux发行版，大约3，400M吧。所以，你也可以用迅雷到网上下载下来，然后把 <code>http://files.vagrantup.com/precise32.box</code> 改成你文件的路径，比如我的是<code>file:///Users/pieux/Documents/o/precise32.box</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init precise32 http://files.vagrantup.com/precise32.box
</span><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<p>4 SSH 进入linux吧！<code>vagrant ssh</code>，退出就是 <code>exit</code></p>

<p>5 关闭Linux的命令是，休眠<code>vagrant suspend</code>，或者关闭<code>vagrant halt</code>。</p>

<h2>man 命令</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1    使用者在shell中可以操作的指令或可执行档
</span><span class='line'>2 系統核心可呼叫的函数与工具等
</span><span class='line'>3 一些常用的函数(function)与函数库(library)，大部分是C的函数库(libc)
</span><span class='line'>4 装置档案的说明，通常在/dev下的档案
</span><span class='line'>5 设定档或者是某些档案的格式
</span><span class='line'>6 游戏(games)
</span><span class='line'>7 惯例与协定等，例如Linux档案系统、网络协定、ASCII code等等的說明
</span><span class='line'>8 系統管理員可用的管理指令
</span><span class='line'>9 跟kernel有关的文件</span></code></pre></td></tr></table></div></figure>


<h2>tree 命令</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tree
</span><span class='line'>-a
</span><span class='line'>-A
</span><span class='line'>-C
</span><span class='line'>man tree</span></code></pre></td></tr></table></div></figure>


<h1>shell 快捷键</h1>

<p>编辑命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ctrl + a ：移到命令行首
</span><span class='line'>Ctrl + e ：移到命令行尾
</span><span class='line'>Ctrl + f ：按字符前移（右向）
</span><span class='line'>Ctrl + b ：按字符后移（左向）
</span><span class='line'>Alt + f ：按单词前移（右向）
</span><span class='line'>Alt + b ：按单词后移（左向）
</span><span class='line'>Ctrl + u ：从光标处删除至命令行首
</span><span class='line'>Ctrl + k ：从光标处删除至命令行尾
</span><span class='line'>Ctrl + d ：删除光标处的字符
</span><span class='line'>Ctrl + y ：粘贴至光标后</span></code></pre></td></tr></table></div></figure>


<p>重新执行命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ctrl + r：逆向搜索命令历史
</span><span class='line'>Ctrl + g：从历史搜索模式退出
</span><span class='line'>Ctrl + p：历史中的上一条命令
</span><span class='line'>Ctrl + n：历史中的下一条命令</span></code></pre></td></tr></table></div></figure>


<p>控制命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Ctrl + l：清屏
</span><span class='line'>Ctrl + s：阻止屏幕输出
</span><span class='line'>Ctrl + q：允许屏幕输出
</span><span class='line'>Ctrl + c：终止命令
</span><span class='line'>Ctrl + z：挂起命令</span></code></pre></td></tr></table></div></figure>


<h2>grep 命令</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep
</span><span class='line'>-v 反选
</span><span class='line'>-E 正则
</span><span class='line'>-i 忽略大小写
</span><span class='line'>-n 加上行号</span></code></pre></td></tr></table></div></figure>


<p>简单的正则表达式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>^ 行首
</span><span class='line'>$ 行尾
</span><span class='line'>. 任意字符
</span><span class='line'>* &gt;0个重复
</span><span class='line'>+ &gt;1个重复
</span><span class='line'>[Gg], [A-Za-z]
</span><span class='line'>\&lt; 单词首
</span><span class='line'>\&gt; 单词尾</span></code></pre></td></tr></table></div></figure>


<h2>进程相关</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps -aux | grep process-name
</span><span class='line'>pgrep
</span><span class='line'>kill
</span><span class='line'>pkill
</span><span class='line'>killall</span></code></pre></td></tr></table></div></figure>


<h2>find</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find -name
</span><span class='line'>find -not -name
</span><span class='line'>-i
</span><span class='line'>-type fdl
</span><span class='line'>-mindepth 3
</span><span class='line'>-maxdepth 3
</span><span class='line'>-exec ls -l {} \;
</span><span class='line'>| xargs ls -l</span></code></pre></td></tr></table></div></figure>


<h2>其他</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch 创建文件
</span><span class='line'>alias 别名
</span><span class='line'>history
</span><span class='line'>sudo !! 重执行上一条命令
</span><span class='line'>cd - 进入之前的目录
</span><span class='line'>wc
</span><span class='line'>chmod 
</span><span class='line'>du -hd 1
</span><span class='line'>du -h --max-depth=1
</span><span class='line'>Ctrl-Z 挂起
</span><span class='line'>fg 恢复
</span><span class='line'>&gt; .gitignore
</span><span class='line'>&lt; .gitignore
</span><span class='line'>mv filename.{old,new}
</span><span class='line'>rm !(*.foo|*.bar|*.baz)</span></code></pre></td></tr></table></div></figure>


<h2>git 相关</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add -A
</span><span class='line'>git reset --soft
</span><span class='line'>git reset --mixed
</span><span class='line'>git reset --hard</span></code></pre></td></tr></table></div></figure>


<h2>学习资料推荐</h2>

<p><a href="http://www.commandlinefu.com/commands/tagged/800/commandfu">http://www.commandlinefu.com/commands/tagged/800/commandfu</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[JRuby Small Memos]]></title>
    <link href="http://poems.github.io/blog/2013/11/27/jruby-small-memos/"/>
    
    <updated>2013-11-27T23:22:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/27/jruby-small-memos</id>
    
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jruby --version</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jruby -e "puts 'This is a short program'" 
</span><span class='line'>This is a short program</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jirb
</span><span class='line'>irb(main):001:0&gt; ['Hello', 'world'].join ' ' 
</span><span class='line'>=&gt; "Hello world"
</span><span class='line'>irb(main):002:0&gt; "ybuRJ morf".reverse
</span><span class='line'>=&gt; ufrom JRuby"
</span><span class='line'>irb(main):003:0&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ease Life with YASnippet]]></title>
    <link href="http://poems.github.io/blog/2013/11/24/ease-life-with-yasnippet/"/>
    
    <updated>2013-11-24T01:44:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/24/ease-life-with-yasnippet</id>
    
    <content type="html"><![CDATA[<p>安装使用<code>package-install</code>，实际上可以写一个简易方法避免重复劳动：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun require-package (package)
</span><span class='line'>  "Install given PACKAGE."
</span><span class='line'>  (unless (package-installed-p package)
</span><span class='line'>    (unless (assoc package package-archive-contents)
</span><span class='line'>      (package-refresh-contents))
</span><span class='line'>    (package-install package)))
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>学习下其中的1个function</p>

<p><code>assoc</code> is a built-in function in `C source code&#8217;.</p>

<p>&#8220;`
(assoc KEY LIST)</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&gt; Return non-nil if KEY is `equal' to the car of an element of LIST.
</span><span class='line'>The value is actually the first element of LIST whose car equals KEY.
</span><span class='line'>
</span><span class='line'>开始学习如何使用YASnippet。
</span><span class='line'>
</span><span class='line'>**1 组织你的 Snippets** (*Organizing Snippets*)
</span><span class='line'>
</span><span class='line'>Snippet的定义是储存在文件系统的文件中。YASnippet的触发机制会找到这些snippet tables，然后展开。
</span><span class='line'>
</span><span class='line'>首先，新建一个目录：my-snippets，用来存放自定义的snippets。
</span></code></pre></td></tr></table></div></figure>


<p>(require &lsquo;yasnippet)</p>

<p>(setq yas-snippet-dirs (concat user-emacs-directory &ldquo;my-snippets&rdquo;))</p>

<p>(add-hook &lsquo;prog-mode-hook &#8216;yas-minor-mode)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>看下是怎么组织snippets的（这是YASnippet自带的）：
</span></code></pre></td></tr></table></div></figure>


<p>snippets tree -a . | head -n 20                                                                                                                      system
.
├── c++-mode
│   ├── .yas-parents
│   ├── beginend
│   ├── class
│   ├── ns
│   ├── template
│   └── using
├── c-mode
│   ├── .yas-parents
│   ├── fopen
│   └── printf
├── cc-mode
│   ├── .yas-parents
│   ├── do
│   ├── for
│   ├── if
│   ├── inc
│   ├── inc.1
│   ├── main</p>

<p>&#8220;`</p>

<p><code>.yas.parent</code>文件可以共享其他目录下的snippets。</p>

<p>如果有一个空的<code>.yas-make-groups</code>文件，会在 YASnippet Menu按照目录结构组织地更清晰。</p>

<p><strong>2 展开你的 Snippets</strong> (<em>Traiggering expansion</em>)</p>

<p>很多中方式能展开snippets，包括：</p>

<ul>
<li><p>By typing an abbrev, the snippet trigger key, and then pressing the key defined in yas/trigger-key (which defaults to &ldquo;TAB&rdquo;). This works in buffers where the minor mode yas/minor-mode is active;</p></li>
<li><p>By invoking the command yas/insert-snippet (either by typing M-x yas/insert-snippet or its keybinding). This does not require yas/minor-mode to be active.</p></li>
<li><p>By using hippie-expand</p></li>
</ul>


<p>以上是3中最常见的方法（虽然我不知道什么是 hippie-expand）。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[macro &amp; defmacro in Emacs]]></title>
    <link href="http://poems.github.io/blog/2013/11/23/macro-and-defmacro-in-emacs/"/>
    
    <updated>2013-11-23T16:42:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/23/macro-and-defmacro-in-emacs</id>
    
    <content type="html"><![CDATA[<p>学习下Lisp的宏（macro）。</p>

<p>首先，区别：Lisp宏和键盘宏（keyboard macro）是两个不同的概念。</p>

<p>一个LISP宏(Lisp Macro)是一个扩展LISP语言的用户定义的结构.
 宏不像函数那样对参数执行表达式. 它们只是在构造一个包括这些参数的表达式.</p>

<blockquote><p>也就是，宏是一个结构，是在构造。就是Lisp非常牛逼的一点：Code as data。</p></blockquote>

<p>首先看下语法定义：</p>

<p><code>defmacro</code> is a Lisp macro in `byte-run.el&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defmacro NAME ARGLIST &optional DOCSTRING DECL &rest BODY)</span></code></pre></td></tr></table></div></figure>


<p>Define NAME as a macro.
When the macro is called, as in (NAME ARGS&hellip;),
the function (lambda ARGLIST BODY&hellip;) is applied to
the list ARGS&hellip; as it appears in the expression,
and the result should be a form to be evaluated instead of the original.
DECL is a declaration, optional, of the form (declare DECLS&hellip;) where
DECLS is a list of elements of the form (PROP . VALUES).  These are
interpreted according to `macro-declarations-alist&#8217;.
The return value is undefined.</p>

<p>好长的解释。</p>

<p>看一个实例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defmacro inc (var)
</span><span class='line'>  (list 'setq var (list '1+ var)))
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意一点：<code>(list '1+ var)</code> 开始时写成<code>(list '1+var)</code>，少写了一个空格。</p></blockquote>

<p>定义了一个Lisp宏：<code>inc (var)</code>。这个macro的BODY是（按照list函数拼出来）:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq var (1+ var))</span></code></pre></td></tr></table></div></figure>


<p>当然也可以这样展开宏：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(macroexpand '(inc x))</span></code></pre></td></tr></table></div></figure>


<p>现在就可以用宏了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq x 1)
</span><span class='line'>(inc x)</span></code></pre></td></tr></table></div></figure>


<blockquote><p>解释:</p></blockquote>

<p><code>list</code> 的用法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>list is a built-in function in `C source code'.
</span><span class='line'>
</span><span class='line'>(list &rest OBJECTS)
</span><span class='line'>
</span><span class='line'>Return a newly created list with specified arguments as elements.
</span><span class='line'>Any number of arguments, even zero arguments, are allowed.
</span></code></pre></td></tr></table></div></figure>


<p>宏还有一种写法，就是使用反引用（Backquote）。</p>

<p>我们可以用 &lsquo; 引用一个对象并不执行.我们还可以用 反引用 ` 引用一个列表, 但是只是选择性的执行列表的元素.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[A Growing Emacser]]></title>
    <link href="http://poems.github.io/blog/2013/11/23/a-growing-emacser/"/>
    
    <updated>2013-11-23T16:00:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/23/a-growing-emacser</id>
    
    <content type="html"><![CDATA[<hr />

<p><code>when:</code> when is a lisp macro</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(when COND BODY...)</span></code></pre></td></tr></table></div></figure>


<p>If COND yields non-nil, do BODY, else return nil.
When COND yields non-nil, eval BODY forms sequentially and return
value of last one, or nil if there are none.</p>

<hr />

<p><code>fboundp</code> is a built-in function in `C source code&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(fboundp SYMBOL)</span></code></pre></td></tr></table></div></figure>


<hr />

<p><code>add-to-list</code> is a compiled Lisp function in `subr.el&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-to-list LIST-VAR ELEMENT &optional APPEND COMPARE-FN)</span></code></pre></td></tr></table></div></figure>


<p>Add ELEMENT to the value of <code>LIST-VAR</code> if it isn&rsquo;t there yet.
The test for presence of <code>ELEMENT</code> is done with <code>equal</code>,
or with <code>COMPARE-FN</code> if that&rsquo;s non-nil.
If <code>ELEMENT</code> is added, it is added at the beginning of the list,
unless the optional argument <code>APPEND</code> is non-nil, in which case
ELEMENT is added at the end.</p>

<p>The return value is the new value of LIST-VAR.</p>

<hr />

<p><code>provide</code> is a built-in function in `C source code&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(provide FEATURE &optional SUBFEATURES)</span></code></pre></td></tr></table></div></figure>


<p>Announce that FEATURE is a feature of the current Emacs.
The optional argument SUBFEATURES should be a list of symbols listing
particular subfeatures supported in this version of FEATURE.</p>

<hr />

<p><code>C-x h</code> runs the command mark-whole-buffer</p>

<p><code>C-w</code> runs the command kill region</p>

<hr />

<p>use <code>C-x &lt;right&gt;</code>, <code>C-x &lt;left&gt;</code> to cycle around in the buffer ring.</p>

<p><code>iswitchb-mode</code> replaces the default C-x b behaviour with a very intuitive buffer-switching-with-completion system.</p>

<p>The related commands are <code>C-x b</code>, <code>C-s</code> and <code>C-r</code>.</p>

<hr />

<p>emacs <code>dired</code> mode.</p>

<p><code>C-x C-j</code>: (dired-jump to current file)
<code>R</code> to rename the file (or &lsquo;dired-do-rename&rsquo;).
<code>C-x k RET</code> to go back to the (renamed) buffer</p>

<hr />
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[A example of writing Exception in java]]></title>
    <link href="http://poems.github.io/blog/2013/11/23/a-example-of-writing-exception-in-java/"/>
    
    <updated>2013-11-23T07:49:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/23/a-example-of-writing-exception-in-java</id>
    
    <content type="html"><![CDATA[<p>记录在阅读 Jasig Cas 的源码学习到的 Java 知识。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public abstract class AuthenticationException extends Exception {
</span></code></pre></td></tr></table></div></figure>


<p>首先，这是一个 abstract class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/** The code to return for resolving to a message description. */
</span><span class='line'>private String code;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Method to return the unique identifier for this error type.
</span><span class='line'> *
</span><span class='line'> * @return the String identifier for this error type.
</span><span class='line'> */
</span><span class='line'>public final String getCode() {
</span><span class='line'>    return this.code;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>使用 code，来解析异常消息的描述。
并且，code 有一个 get 方法，final 不可继承。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/** The error type that provides additional info about the nature of the exception cause **/
</span><span class='line'>private String type = "error";
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Method to return the error type of this exception
</span><span class='line'> *
</span><span class='line'> * @return the String identifier for the cause of this error.
</span><span class='line'> */
</span><span class='line'>public final String getType() {
</span><span class='line'>    return this.type;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>额外的一个 field: type，维护导致异常的本质信息。</p>

<p>下面是 <code>AuthenticationException</code> 的 constructors。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public AuthenticationException(final String code) {
</span><span class='line'>    this.code = code;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这是第1个 constructor。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public AuthenticationException(final String code, final String msg) {
</span><span class='line'>    super(msg);
</span><span class='line'>    this.code = code;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public AuthenticationException(final String code, final String msg, final String type) {
</span><span class='line'>    super(msg);
</span><span class='line'>    this.code = code;
</span><span class='line'>    this.type = type;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>第2个和第3个 constructor，需要学习的是 <code>super(msg)</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Constructor that takes a code description of the error and the chained
</span><span class='line'> * exception. These codes normally have a corresponding entries in the
</span><span class='line'> * messages file for the internationalization of error messages.
</span><span class='line'> *
</span><span class='line'> * @param code The short unique identifier for this error.
</span><span class='line'> * @param throwable The chained exception for this AuthenticationException
</span><span class='line'> */
</span><span class='line'>public AuthenticationException(final String code, final Throwable throwable) {
</span><span class='line'>    super(throwable);
</span><span class='line'>    this.code = code;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>最后一个 constructor，需要学习的是 <code>final Throwable throwable</code>，这块不是很懂。按描述是能链式异常。
查看了 <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Exception.html#Exception(java.lang.Throwable)">Java Exception 文档</a>，它有一个 constructor：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Exception(Throwable cause)</span></code></pre></td></tr></table></div></figure>


<p>它的作用是：用指定的 cause 和 详细的 message(<code>cause==null ? null : cause.toString()</code>)构造新的异常。
它的作用就是一个 &ldquo;wrapper&#8221;。</p>

<p>完整源码见：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> * Licensed to Jasig under one or more contributor license
</span><span class='line'> * agreements. See the NOTICE file distributed with this work
</span><span class='line'> * for additional information regarding copyright ownership.
</span><span class='line'> * Jasig licenses this file to you under the Apache License,
</span><span class='line'> * Version 2.0 (the "License"); you may not use this file
</span><span class='line'> * except in compliance with the License.  You may obtain a
</span><span class='line'> * copy of the License at the following location:
</span><span class='line'> *
</span><span class='line'> *   http://www.apache.org/licenses/LICENSE-2.0
</span><span class='line'> *
</span><span class='line'> * Unless required by applicable law or agreed to in writing,
</span><span class='line'> * software distributed under the License is distributed on an
</span><span class='line'> * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
</span><span class='line'> * KIND, either express or implied.  See the License for the
</span><span class='line'> * specific language governing permissions and limitations
</span><span class='line'> * under the License.
</span><span class='line'> */
</span><span class='line'>package org.jasig.cas.authentication.handler;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * The most generic type of authentication exception that one can catch if not
</span><span class='line'> * sure what specific implementation will be thrown. Top of the tree of all
</span><span class='line'> * other AuthenticationExceptions.
</span><span class='line'> *
</span><span class='line'> * @author Scott Battaglia
</span><span class='line'> * @version $Revision$ $Date$
</span><span class='line'> * @since 3.0
</span><span class='line'> */
</span><span class='line'>public abstract class AuthenticationException extends Exception {
</span><span class='line'>
</span><span class='line'>    /** Serializable ID. */
</span><span class='line'>    private static final long serialVersionUID = 3906648604830611762L;
</span><span class='line'>
</span><span class='line'>    /** The code to return for resolving to a message description. */
</span><span class='line'>    private String code;
</span><span class='line'>
</span><span class='line'>    /** The error type that provides additional info about the nature of the exception cause **/
</span><span class='line'>    private String type = "error";
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Constructor that takes a code description of the error. These codes
</span><span class='line'>     * normally have a corresponding entries in the messages file for the
</span><span class='line'>     * internationalization of error messages.
</span><span class='line'>     *
</span><span class='line'>     * @param code The short unique identifier for this error.
</span><span class='line'>     */
</span><span class='line'>    public AuthenticationException(final String code) {
</span><span class='line'>        this.code = code;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Constructor that takes a &lt;code&gt;code&lt;/code&gt; description of the error along with the exception
</span><span class='line'>     * &lt;code&gt;msg&lt;/code&gt; generally for logging purposes. These codes normally have a corresponding
</span><span class='line'>     * entries in the messages file for the internationalization of error messages.
</span><span class='line'>     *
</span><span class='line'>     * @param code The short unique identifier for this error.
</span><span class='line'>     * @param msg The error message associated with this exception for additional logging purposes.
</span><span class='line'>     */
</span><span class='line'>    public AuthenticationException(final String code, final String msg) {
</span><span class='line'>        super(msg);
</span><span class='line'>        this.code = code;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Constructor that takes a &lt;code&gt;code&lt;/code&gt; description of the error along with the exception
</span><span class='line'>     * &lt;code&gt;msg&lt;/code&gt; generally for logging purposes and the &lt;code&gt;type&lt;/code&gt; of the error that originally caused the exception.
</span><span class='line'>     * These codes normally have a corresponding entries in the messages file for the internationalization of error messages.
</span><span class='line'>     *
</span><span class='line'>     * @param code The short unique identifier for this error.
</span><span class='line'>     * @param msg The error message associated with this exception for additional logging purposes.
</span><span class='line'>     * @param type The type of the error message that caused the exception to be thrown. By default,
</span><span class='line'>     * all errors are considered of &lt;code&gt;error&lt;/code&gt;.
</span><span class='line'>     */
</span><span class='line'>    public AuthenticationException(final String code, final String msg, final String type) {
</span><span class='line'>        super(msg);
</span><span class='line'>        this.code = code;
</span><span class='line'>        this.type = type;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Constructor that takes a code description of the error and the chained
</span><span class='line'>     * exception. These codes normally have a corresponding entries in the
</span><span class='line'>     * messages file for the internationalization of error messages.
</span><span class='line'>     *
</span><span class='line'>     * @param code The short unique identifier for this error.
</span><span class='line'>     * @param throwable The chained exception for this AuthenticationException
</span><span class='line'>     */
</span><span class='line'>    public AuthenticationException(final String code, final Throwable throwable) {
</span><span class='line'>        super(throwable);
</span><span class='line'>        this.code = code;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Method to return the error type of this exception
</span><span class='line'>     *
</span><span class='line'>     * @return the String identifier for the cause of this error.
</span><span class='line'>     */
</span><span class='line'>    public final String getType() {
</span><span class='line'>        return this.type;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Method to return the unique identifier for this error type.
</span><span class='line'>     *
</span><span class='line'>     * @return the String identifier for this error type.
</span><span class='line'>     */
</span><span class='line'>    public final String getCode() {
</span><span class='line'>        return this.code;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public final String toString() {
</span><span class='line'>        String msg = getCode();
</span><span class='line'>        if (getMessage() != null && getMessage().trim().length() &gt; 0)
</span><span class='line'>            msg = ":" + getMessage();
</span><span class='line'>        return msg;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>



]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[A Blank Page for Test]]></title>
    <link href="http://poems.github.io/blog/2013/11/02/a-blank-page-for-test/"/>
    
    <updated>2013-11-02T11:23:00+00:00</updated>
    <id>http://poems.github.io/blog/2013/11/02/a-blank-page-for-test</id>
    
    <content type="html"><![CDATA[<h1>A Blank Page for Test</h1>
]]></content>
    
  </entry>
  
</feed>